{"version":3,"file":"passkey-r8IpbBKX.js","sources":["../../../app/javascript/passkey.js"],"sourcesContent":["\n// Base64URL変換関数\nfunction base64URLToArrayBuffer(base64url) {\n    const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\nfunction arrayBufferToBase64URL(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    const base64 = btoa(binary);\n    return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\n// Passkey認証用の関数\nasync function startPasskeyAuthentication(passkeyOptions) {\n    console.log('Passkey authentication started');\n    console.log('Passkey options received:', passkeyOptions);\n\n    if (!navigator.credentials || !navigator.credentials.get) {\n        throw new Error('WebAuthn is not supported by this browser');\n    }\n\n    // Passkeyオプションの変換（修正版）\n    const convertedOptions = {\n        challenge: base64URLToArrayBuffer(passkeyOptions.challenge),\n        timeout: passkeyOptions.timeout || 300000,\n        rpId: passkeyOptions.rpId,\n        userVerification: passkeyOptions.userVerification || 'required',\n        // TouchID/FaceID認証のためのauthenticatorSelection設定を追加\n        authenticatorSelection: passkeyOptions.authenticatorSelection\n    };\n\n    // allowCredentialsの処理\n    if (passkeyOptions.allowCredentials && Array.isArray(passkeyOptions.allowCredentials)) {\n        console.log('Processing allowCredentials array:', passkeyOptions.allowCredentials);\n\n        convertedOptions.allowCredentials = passkeyOptions.allowCredentials.map((cred, index) => {\n            console.log(`Processing credential ${index}:`, cred);\n\n            let credentialId;\n            try {\n                if (typeof cred.id === 'string') {\n                    credentialId = base64URLToArrayBuffer(cred.id);\n                    console.log(`Converted string credential ID for ${index}`);\n                } else if (Array.isArray(cred.id)) {\n                    credentialId = new Uint8Array(cred.id).buffer;\n                    console.log(`Converted array credential ID for ${index}`);\n                } else {\n                    credentialId = cred.id;\n                    console.log(`Using existing credential ID for ${index}`);\n                }\n\n                return {\n                    id: credentialId,\n                    type: cred.type || 'public-key'\n                };\n            } catch (error) {\n                console.error(`Error processing credential ${index}:`, error);\n                throw new Error(`Failed to process credential ${index}: ${error.message}`);\n            }\n        });\n    }\n\n    console.log('Final converted authentication options:', {\n        ...convertedOptions,\n        challenge: '[ArrayBuffer]',\n        allowCredentials: convertedOptions.allowCredentials?.map((cred, index) => ({\n            ...cred,\n            id: `[ArrayBuffer ${index}]`\n        }))\n    });\n\n    // ドキュメントのフォーカスを確保\n    if (!document.hasFocus()) {\n        console.log('Document does not have focus, attempting to focus');\n        window.focus();\n        // 少し待ってからフォーカスの状態を再確認\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    // ユーザーインタラクションの確認\n    if (!document.hasFocus()) {\n        console.warn('Document still does not have focus after focusing attempt');\n        throw new Error('認証には画面のフォーカスが必要です。ブラウザをアクティブにしてから再試行してください。');\n    }\n\n    console.log('Document focus status:', document.hasFocus());\n\n    // Passkey認証実行\n    return navigator.credentials.get({\n        publicKey: convertedOptions\n    }).then(credential => {\n        console.log('Passkey authentication successful:', credential);\n\n        if (!credential) {\n            throw new Error('No credential returned from Passkey');\n        }\n\n        // 認証データを準備して返す（サーバー送信は呼び出し側で処理）\n        const credentialData = {\n            id: credential.id,\n            rawId: arrayBufferToBase64URL(credential.rawId),\n            type: credential.type,\n            response: {\n                clientDataJSON: arrayBufferToBase64URL(credential.response.clientDataJSON),\n                authenticatorData: arrayBufferToBase64URL(credential.response.authenticatorData),\n                signature: arrayBufferToBase64URL(credential.response.signature),\n                userHandle: credential.response.userHandle ? arrayBufferToBase64URL(credential.response.userHandle) : null\n            }\n        };\n\n        console.log('Credential data prepared:', credentialData);\n        return credentialData;\n        \n    }).catch(error => {\n        console.error('Passkey authentication failed:', error);\n        throw error;\n    });\n}\n\n// Passkey登録用の関数\nfunction startPasskeyRegistration(passkeyOptions, label) {\n    console.log('Passkey registration started');\n\n    if (!navigator.credentials || !navigator.credentials.create) {\n        throw new Error('WebAuthn is not supported by this browser');\n    }\n\n    console.log('Passkey options:', passkeyOptions);\n\n    // WebAuthnオプションの変換\n    const convertedOptions = {\n        challenge: base64URLToArrayBuffer(passkeyOptions.challenge),\n        rp: passkeyOptions.rp,\n        user: {\n            id: base64URLToArrayBuffer(passkeyOptions.user.id),\n            name: passkeyOptions.user.name,\n            displayName: passkeyOptions.user.displayName\n        },\n        pubKeyCredParams: passkeyOptions.pubKeyCredParams,\n        timeout: passkeyOptions.timeout,\n        attestation: passkeyOptions.attestation || 'direct',\n        authenticatorSelection: passkeyOptions.authenticatorSelection\n    };\n\n    // excludeCredentialsがある場合は変換\n    if (passkeyOptions.excludeCredentials && passkeyOptions.excludeCredentials.length > 0) {\n        convertedOptions.excludeCredentials = passkeyOptions.excludeCredentials.map(cred => ({\n            id: base64URLToArrayBuffer(cred.id),\n            type: cred.type\n        }));\n    }\n\n    console.log('Converted options:', convertedOptions);\n    console.log('Starting Passkey registration...');\n\n    return navigator.credentials.create({\n        publicKey: convertedOptions\n    }).then(credential => {\n        console.log('Passkey credential created:', credential);\n\n        const credentialData = {\n            id: credential.id,\n            rawId: arrayBufferToBase64URL(credential.rawId),\n            type: credential.type,\n            response: {\n                clientDataJSON: arrayBufferToBase64URL(credential.response.clientDataJSON),\n                attestationObject: arrayBufferToBase64URL(credential.response.attestationObject)\n            }\n        };\n\n        const csrfTokenElement = document.querySelector('meta[name=\"csrf-token\"]');\n        if (!csrfTokenElement) {\n            throw new Error('CSRF token not found');\n        }\n        const csrfToken = csrfTokenElement.getAttribute('content');\n\n        return fetch('/passkey_registrations/verify_passkey', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'X-CSRF-Token': csrfToken\n            },\n            body: JSON.stringify({\n                credential: credentialData,\n                label: label\n            })\n        });\n    }).then(response => {\n        console.log('Registration response status:', response.status);\n\n        const contentType = response.headers.get('content-type');\n        console.log('Response content-type:', contentType);\n\n        if (contentType && contentType.includes('application/json')) {\n            return response.json().then(data => {\n                console.log('Registration response data:', data);\n\n                if (data.success) {\n                    // 仮登録完了の場合はリダイレクトしない\n                    if (data.show_confirmation_notice) {\n                        return data;\n                    } else {\n                        window.location.href = data.redirect_url || '/';\n                    }\n                } else {\n                    throw new Error(data.error || 'Passkey registration failed');\n                }\n            });\n        } else {\n            if (response.ok) {\n                return response.text().then(html => {\n                    console.log('HTML response received:', html.substring(0, 200) + '...');\n                    window.location.href = '/';\n                });\n            } else {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n        }\n    }).catch(error => {\n        console.error('Passkey registration failed:', error);\n        throw error;\n    });\n}\n\n// グローバル関数として定義\nwindow.startPasskeyAuthentication = startPasskeyAuthentication;\nwindow.startPasskeyRegistration = startPasskeyRegistration;\nexport { startPasskeyAuthentication, startPasskeyRegistration };\n\n// モジュール読み込み完了を即時に通知（DOMContentLoadedを待たない）\n(function signalPasskeyReady() {\n    try {\n        window.passkeyModuleLoaded = true;\n        // 重複発火しても問題ないようにする\n        const evt = new Event('passkey:ready');\n        window.dispatchEvent(evt);\n    } catch (e) {\n        // 環境によっては Event の生成に失敗することがあるが、無視しても致命的ではない\n        console.warn('Failed to dispatch passkey:ready event:', e);\n    }\n})();\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('Passkey module loaded (DOMContentLoaded)');\n    window.passkeyModuleLoaded = true;\n    try {\n        window.dispatchEvent(new Event('passkey:ready'));\n    } catch (e) {}\n});"],"names":["base64URLToArrayBuffer","base64url","base64","binaryString","bytes","i","arrayBufferToBase64URL","buffer","binary","startPasskeyAuthentication","passkeyOptions","_a","convertedOptions","cred","index","credentialId","error","resolve","credential","credentialData","startPasskeyRegistration","label","csrfTokenElement","csrfToken","response","contentType","data","html","evt","e"],"mappings":"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"}