function i(t){const n=t.replace(/-/g,"+").replace(/_/g,"/"),a=atob(n),e=new Uint8Array(a.length);for(let o=0;o<a.length;o++)e[o]=a.charCodeAt(o);return e.buffer}function s(t){const n=new Uint8Array(t);let a="";for(let o=0;o<n.byteLength;o++)a+=String.fromCharCode(n[o]);return btoa(a).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}async function c(t){var a;if(console.log("Passkey authentication started"),console.log("Passkey options received:",t),!navigator.credentials||!navigator.credentials.get)throw new Error("WebAuthn is not supported by this browser");const n={challenge:i(t.challenge),timeout:t.timeout||3e5,rpId:t.rpId,userVerification:t.userVerification||"required",authenticatorSelection:t.authenticatorSelection};if(t.allowCredentials&&Array.isArray(t.allowCredentials)&&(console.log("Processing allowCredentials array:",t.allowCredentials),n.allowCredentials=t.allowCredentials.map((e,o)=>{console.log(`Processing credential ${o}:`,e);let r;try{return typeof e.id=="string"?(r=i(e.id),console.log(`Converted string credential ID for ${o}`)):Array.isArray(e.id)?(r=new Uint8Array(e.id).buffer,console.log(`Converted array credential ID for ${o}`)):(r=e.id,console.log(`Using existing credential ID for ${o}`)),{id:r,type:e.type||"public-key"}}catch(l){throw console.error(`Error processing credential ${o}:`,l),new Error(`Failed to process credential ${o}: ${l.message}`)}})),console.log("Final converted authentication options:",{...n,challenge:"[ArrayBuffer]",allowCredentials:(a=n.allowCredentials)==null?void 0:a.map((e,o)=>({...e,id:`[ArrayBuffer ${o}]`}))}),document.hasFocus()||(console.log("Document does not have focus, attempting to focus"),window.focus(),await new Promise(e=>setTimeout(e,100))),!document.hasFocus())throw console.warn("Document still does not have focus after focusing attempt"),new Error("認証には画面のフォーカスが必要です。ブラウザをアクティブにしてから再試行してください。");return console.log("Document focus status:",document.hasFocus()),navigator.credentials.get({publicKey:n}).then(e=>{if(console.log("Passkey authentication successful:",e),!e)throw new Error("No credential returned from Passkey");const o={id:e.id,rawId:s(e.rawId),type:e.type,response:{clientDataJSON:s(e.response.clientDataJSON),authenticatorData:s(e.response.authenticatorData),signature:s(e.response.signature),userHandle:e.response.userHandle?s(e.response.userHandle):null}};return console.log("Credential data prepared:",o),o}).catch(e=>{throw console.error("Passkey authentication failed:",e),e})}function d(t,n){if(console.log("Passkey registration started"),!navigator.credentials||!navigator.credentials.create)throw new Error("WebAuthn is not supported by this browser");console.log("Passkey options:",t);const a={challenge:i(t.challenge),rp:t.rp,user:{id:i(t.user.id),name:t.user.name,displayName:t.user.displayName},pubKeyCredParams:t.pubKeyCredParams,timeout:t.timeout,attestation:t.attestation||"direct",authenticatorSelection:t.authenticatorSelection};return t.excludeCredentials&&t.excludeCredentials.length>0&&(a.excludeCredentials=t.excludeCredentials.map(e=>({id:i(e.id),type:e.type}))),console.log("Converted options:",a),console.log("Starting Passkey registration..."),navigator.credentials.create({publicKey:a}).then(e=>{console.log("Passkey credential created:",e);const o={id:e.id,rawId:s(e.rawId),type:e.type,response:{clientDataJSON:s(e.response.clientDataJSON),attestationObject:s(e.response.attestationObject)}},r=document.querySelector('meta[name="csrf-token"]');if(!r)throw new Error("CSRF token not found");const l=r.getAttribute("content");return fetch("/passkey_registrations/verify_passkey",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRF-Token":l},body:JSON.stringify({credential:o,label:n})})}).then(e=>{console.log("Registration response status:",e.status);const o=e.headers.get("content-type");if(console.log("Response content-type:",o),o&&o.includes("application/json"))return e.json().then(r=>{if(console.log("Registration response data:",r),r.success){if(r.show_confirmation_notice)return r;window.location.href=r.redirect_url||"/"}else throw new Error(r.error||"Passkey registration failed")});if(e.ok)return e.text().then(r=>{console.log("HTML response received:",r.substring(0,200)+"..."),window.location.href="/"});throw new Error(`HTTP error! status: ${e.status}`)}).catch(e=>{throw console.error("Passkey registration failed:",e),e})}window.startPasskeyAuthentication=c;window.startPasskeyRegistration=d;(function(){try{window.passkeyModuleLoaded=!0;const n=new Event("passkey:ready");window.dispatchEvent(n)}catch(n){console.warn("Failed to dispatch passkey:ready event:",n)}})();document.addEventListener("DOMContentLoaded",function(){console.log("Passkey module loaded (DOMContentLoaded)"),window.passkeyModuleLoaded=!0;try{window.dispatchEvent(new Event("passkey:ready"))}catch{}});export{d as a,c as s};
//# sourceMappingURL=passkey-r8IpbBKX.js.map
