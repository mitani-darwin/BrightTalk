function i(o){const n=o.replace(/-/g,"+").replace(/_/g,"/"),e=atob(n),t=new Uint8Array(e.length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t.buffer}function s(o){const n=new Uint8Array(o);let e="";for(let r=0;r<n.byteLength;r++)e+=String.fromCharCode(n[r]);return btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}async function c(o){if(console.log("Passkey authentication started"),console.log("Passkey options received:",o),!navigator.credentials||!navigator.credentials.get)throw new Error("WebAuthn is not supported by this browser");const n={challenge:i(o.challenge),timeout:o.timeout||3e5,rpId:o.rpId,userVerification:o.userVerification||"required",authenticatorSelection:o.authenticatorSelection};if(o.allowCredentials&&Array.isArray(o.allowCredentials)&&(console.log("Processing allowCredentials array:",o.allowCredentials),n.allowCredentials=o.allowCredentials.map((e,t)=>{console.log(`Processing credential ${t}:`,e);let r;try{return typeof e.id=="string"?(r=i(e.id),console.log(`Converted string credential ID for ${t}`)):Array.isArray(e.id)?(r=new Uint8Array(e.id).buffer,console.log(`Converted array credential ID for ${t}`)):(r=e.id,console.log(`Using existing credential ID for ${t}`)),{id:r,type:e.type||"public-key"}}catch(a){throw console.error(`Error processing credential ${t}:`,a),new Error(`Failed to process credential ${t}: ${a.message}`)}})),console.log("Final converted authentication options:",{...n,challenge:"[ArrayBuffer]",allowCredentials:n.allowCredentials?.map((e,t)=>({...e,id:`[ArrayBuffer ${t}]`}))}),document.hasFocus()||(console.log("Document does not have focus, attempting to focus"),window.focus(),await new Promise(e=>setTimeout(e,100))),!document.hasFocus())throw console.warn("Document still does not have focus after focusing attempt"),new Error("認証には画面のフォーカスが必要です。ブラウザをアクティブにしてから再試行してください。");return console.log("Document focus status:",document.hasFocus()),navigator.credentials.get({publicKey:n}).then(e=>{if(console.log("Passkey authentication successful:",e),!e)throw new Error("No credential returned from Passkey");const t={id:e.id,rawId:s(e.rawId),type:e.type,response:{clientDataJSON:s(e.response.clientDataJSON),authenticatorData:s(e.response.authenticatorData),signature:s(e.response.signature),userHandle:e.response.userHandle?s(e.response.userHandle):null}};return console.log("Credential data prepared:",t),t}).catch(e=>{throw console.error("Passkey authentication failed:",e),e})}function d(o,n){if(console.log("Passkey registration started"),!navigator.credentials||!navigator.credentials.create)throw new Error("WebAuthn is not supported by this browser");console.log("Passkey options:",o);const e={challenge:i(o.challenge),rp:o.rp,user:{id:i(o.user.id),name:o.user.name,displayName:o.user.displayName},pubKeyCredParams:o.pubKeyCredParams,timeout:o.timeout,attestation:o.attestation||"direct",authenticatorSelection:o.authenticatorSelection};return o.excludeCredentials&&o.excludeCredentials.length>0&&(e.excludeCredentials=o.excludeCredentials.map(t=>({id:i(t.id),type:t.type}))),console.log("Converted options:",e),console.log("Starting Passkey registration..."),navigator.credentials.create({publicKey:e}).then(t=>{console.log("Passkey credential created:",t);const r={id:t.id,rawId:s(t.rawId),type:t.type,response:{clientDataJSON:s(t.response.clientDataJSON),attestationObject:s(t.response.attestationObject)}},a=document.querySelector('meta[name="csrf-token"]');if(!a)throw new Error("CSRF token not found");const l=a.getAttribute("content");return fetch("/passkey_registrations/verify_passkey",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-CSRF-Token":l},body:JSON.stringify({credential:r,label:n})})}).then(t=>{console.log("Registration response status:",t.status);const r=t.headers.get("content-type");if(console.log("Response content-type:",r),r&&r.includes("application/json"))return t.json().then(a=>{if(console.log("Registration response data:",a),a.success){if(a.show_confirmation_notice)return a;window.location.href=a.redirect_url||"/"}else throw new Error(a.error||"Passkey registration failed")});if(t.ok)return t.text().then(a=>{console.log("HTML response received:",a.substring(0,200)+"..."),window.location.href="/"});throw new Error(`HTTP error! status: ${t.status}`)}).catch(t=>{throw console.error("Passkey registration failed:",t),t})}window.startPasskeyAuthentication=c;window.startPasskeyRegistration=d;(function(){try{window.passkeyModuleLoaded=!0;const n=new Event("passkey:ready");window.dispatchEvent(n)}catch(n){console.warn("Failed to dispatch passkey:ready event:",n)}})();document.addEventListener("DOMContentLoaded",function(){console.log("Passkey module loaded (DOMContentLoaded)"),window.passkeyModuleLoaded=!0;try{window.dispatchEvent(new Event("passkey:ready"))}catch{}});export{d as a,c as s};
//# sourceMappingURL=passkey-dcje0AiI.js.map
