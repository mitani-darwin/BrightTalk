
<div class="row">
  <div class="col-12">
    <%= form_with model: post, local: true, multipart: true, class: "needs-validation", novalidate: true, data: { turbo: false } do |form| %>
      <% if post.errors.any? %>
        <div class="alert alert-danger">
          <h4><%= pluralize(post.errors.count, "error") %> prohibited this post from being saved:</h4>
          <ul>
            <% post.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <div class="row" id="formContainer">
        <!-- サイドバー（左側） -->
        <div class="col-md-4" style="height: 100%;">

          <!-- 投稿の目的（投稿タイプの上） -->
          <div class="mb-3">
            <%= form.label :purpose, class: "form-label" do %>
              投稿の目的
              <span class="text-danger">*</span>
              <small class="text-muted">(公開時は必須)</small>
            <% end %>
            <%= form.text_area :purpose, class: "form-control #{'is-invalid' if post.errors[:purpose].any?}", rows: 1,
                               placeholder: "例: Railsの基本的な使い方を初心者に分かりやすく説明したい" %>
            <div class="form-text">この投稿で何を伝えたいか、具体的な目的を記入してください。</div>
          </div>


          <!-- 投稿タイプ（対象読者の上） -->
          <div class="mb-3">
            <%= form.label :post_type_id, class: "form-label" do %>
              投稿タイプ
              <span class="text-danger">*</span>
              <small class="text-muted">(公開時は必須)</small>
            <% end %>
            <div class="d-flex gap-2 mb-2">
              <%= form.collection_select :post_type_id, PostType.all.order(:name), :id, :name,
                                         { prompt: "投稿タイプを選択してください" },
                                         { class: "form-select #{'is-invalid' if post.errors[:post_type_id].any?}", id: "postTypeSelect" } %>
              <button type="button" class="btn btn-outline-primary btn-sm" id="addPostTypeBtn" style="white-space: nowrap;">
                <i class="fas fa-plus"></i> 追加
              </button>
            </div>

            <!-- 新規投稿タイプ追加フォーム（初期は非表示） -->
            <div id="newPostTypeForm" class="card" style="display: none;">
              <div class="card-body p-3">
                <h6 class="card-title">新しい投稿タイプを追加</h6>
                <div class="mb-2">
                  <label for="newPostTypeName" class="form-label form-label-sm">投稿タイプ名</label>
                  <input type="text" id="newPostTypeName" name="newPostTypeName" class="form-control form-control-sm"
                         placeholder="投稿タイプ名" maxlength="50">
                </div>
                <div class="mb-2">
                  <label for="newPostTypeDescription" class="form-label form-label-sm">説明（任意）</label>
                  <textarea id="newPostTypeDescription" class="form-control form-control-sm"
                            placeholder="説明（任意）" rows="2" maxlength="200"></textarea>
                </div>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-success btn-sm" id="savePostTypeBtn">
                    <i class="fas fa-save"></i> 保存
                  </button>
                  <button type="button" class="btn btn-secondary btn-sm" id="cancelPostTypeBtn">
                    キャンセル
                  </button>
                </div>
                <div id="postTypeError" class="alert alert-danger mt-2" style="display: none;"></div>
                <div id="postTypeSuccess" class="alert alert-success mt-2" style="display: none;"></div>
              </div>
            </div>
            <div class="form-text">この投稿の主な目的を選択してください。</div>
          </div>

          <!-- カテゴリー選択と新規追加（階層構造対応） -->
          <div class="mb-3">
            <%= form.label :category_id, class: "form-label" do %>
              カテゴリー
              <span class="text-danger">*</span>
              <small class="text-muted">(公開時は必須)</small>
            <% end %>
            <div class="d-flex gap-2 mb-2">
              <%= form.collection_select :category_id, Category.all.order(:name), :id, :full_name,
                                         { prompt: "カテゴリーを選択してください" },
                                         { class: "form-select #{'is-invalid' if post.errors[:category_id].any?}", id: "categorySelect" } %>
              <button type="button" class="btn btn-outline-primary btn-sm" id="addCategoryBtn" style="white-space: nowrap;">
                <i class="fas fa-plus"></i> 追加
              </button>
            </div>

            <!-- 新規カテゴリー追加フォーム（階層構造対応・初期は非表示） -->
            <div id="newCategoryForm" class="card" style="display: none;">
              <div class="card-body p-3">
                <h6 class="card-title">新しいカテゴリーを追加</h6>
                <div class="mb-2">
                  <label for="newCategoryParent" class="form-label form-label-sm">親カテゴリー（任意）</label>
                  <select id="newCategoryParent" class="form-select form-select-sm">
                    <option value="">-- ルートカテゴリーとして作成 --</option>
                    <% Category.all.order(:name).each do |category| %>
                      <option value="<%= category.id %>"><%= category.full_name %></option>
                    <% end %>
                  </select>
                </div>
                <div class="mb-2">
                  <label for="newCategoryName" class="form-label form-label-sm">カテゴリー名</label>
                  <input type="text" id="newCategoryName" name="newCategoryName" class="form-control form-control-sm"
                         placeholder="カテゴリー名" maxlength="50">
                </div>
                <div class="mb-2">
                  <label for="newCategoryDescription" class="form-label form-label-sm">説明（任意）</label>
                  <textarea id="newCategoryDescription" class="form-control form-control-sm"
                            placeholder="説明（任意）" rows="2" maxlength="200"></textarea>
                </div>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-success btn-sm" id="saveCategoryBtn">
                    <i class="fas fa-save"></i> 保存
                  </button>
                  <button type="button" class="btn btn-secondary btn-sm" id="cancelCategoryBtn">
                    キャンセル
                  </button>
                </div>
                <div id="categoryError" class="alert alert-danger mt-2" style="display: none;"></div>
                <div id="categorySuccess" class="alert alert-success mt-2" style="display: none;"></div>
              </div>
            </div>
          </div>

          <!-- 対象読者（投稿の目的の下） -->
          <div class="mb-3">
            <%= form.label :target_audience, class: "form-label" do %>
              対象読者
              <span class="text-danger">*</span>
              <small class="text-muted">(公開時は必須)</small>
            <% end %>
            <%= form.text_field :target_audience, class: "form-control #{'is-invalid' if post.errors[:target_audience].any?}", required: true,
                                placeholder: "例: プログラミング初心者、Rails学習者" %>
            <div class="form-text">どのような読者に向けた内容かを記入してください。</div>
          </div>


          <!-- 期待する成果（対象読者の下） -->
          <div class="mb-3">
            <%= form.label :expected_outcome, "期待する成果", class: "form-label" %>
            <%= form.text_area :expected_outcome, class: "form-control", rows: 1,
                               placeholder: "例: 読者がRailsの基本的な開発環境を構築できるようになる" %>
            <div class="form-text">この投稿を読んだ後、読者にどうなってほしいかを記入してください。</div>
          </div>



          <!-- 画像アップロード（複数対応） -->
          <div class="mb-3">
            <%= form.label :images, "画像", class: "form-label" %>
            <%= form.file_field :images, multiple: true, accept: "image/*",
                                class: "form-control", id: "imageInput" %>
            <div class="form-text">
              複数の画像を選択できます（PNG, JPG, GIF形式）。選択すると、内容欄のカーソル位置に画像のマークダウンを自動で挿入します。
            </div>
          </div>

          <!-- 動画アップロード（複数対応） -->
          <div class="mb-3">
            <%= form.label :videos, "動画", class: "form-label" %>
            <%= form.file_field :videos, multiple: true, accept: "video/*",
                                class: "form-control", id: "videoInput" %>
            <div class="form-text">
              複数の動画を選択できます（MP4, WebM など）。選択すると、内容欄のカーソル位置に動画のプレースホルダを自動で挿入します（プレビューは表示しません）。
            </div>
          </div>


          <!-- 既存画像の表示（編集時） -->
          <% if post.images.attached? %>
            <div class="mb-3">
              <label class="form-label">現在の画像:</label>
              <div class="row">
                <% post.images.select(&:persisted?).each_with_index do |image, index| %>
                  <div class="col-12 mb-2">
                    <%= image_tag image, class: "img-thumbnail", style: "width: 100%; height: 150px; object-fit: cover;" %>
                    <div class="mt-1 d-flex gap-2">
                      <%= link_to "内容に挿入", "#", class: "btn btn-sm btn-outline-primary insert-existing-image",
                                  data: { url: url_for(image), filename: (image.filename || "image") },
                                  onclick: "return false;" %>
                      <%= link_to "削除", "#", class: "btn btn-sm btn-outline-danger",
                                  onclick: "removeImage(#{index}); return false;" %>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>

          <!-- 既存動画の表示（編集時） -->
          <% if post.videos&.attached? %>
            <div class="mb-3">
              <label class="form-label">現在の動画:</label>
              <div class="row">
                <% post.videos.select(&:persisted?).each_with_index do |video, index| %>
                  <div class="col-12 mb-2">
                    <div class="p-2 border rounded bg-light d-flex justify-content-between align-items-center">
                      <span><i class="fas fa-video"></i> <%= video.filename %></span>
                      <div class="d-flex gap-2">
                        <%= link_to "内容に挿入", "#", class: "btn btn-sm btn-outline-primary insert-existing-video",
                                    data: { url: url_for(video), filename: (video.filename || "video") },
                                    onclick: "return false;" %>
                        <%= link_to "削除", "#", class: "btn btn-sm btn-outline-danger",
                                    onclick: "alert('動画削除機能は後で実装します'); return false;" %>
                      </div>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>

        </div>

          <!-- メインコンテンツ（右側） -->
          <div class="col-md-8 d-flex flex-column" style="height: 100%;">

          <!-- 要点・ポイント（タイトルの上） -->
          <div class="mb-3">
            <%= form.label :key_points, "要点・ポイント", class: "form-label" %>
            <%= form.text_area :key_points, class: "form-control", rows: 4,
                               placeholder: "例：\n1. 環境構築の手順\n2. 基本的なコマンドの使い方\n3. よくあるエラーとその対処法" %>
            <div class="form-text">読者に伝えたい主要なポイントを箇条書きで記入してください。</div>
          </div>

          <!-- タイトル -->
          <div class="mb-3">
            <%= form.label :title, class: "form-label" do %>
              タイトル
              <span class="text-danger">*</span>
              <small class="text-muted">(常に必須)</small>
            <% end %>
            <%= form.text_field :title, class: "form-control #{'is-invalid' if post.errors[:title].any?}", required: true, placeholder: "投稿タイトル" %>
            <div class="invalid-feedback">
              タイトルを入力してください。
            </div>
          </div>

          <!-- 内容 -->
          <div class="mb-3 flex-grow-1 d-flex flex-column">
            <%= form.label :content, class: "form-label" do %>
              内容
              <span class="text-danger">*</span>
              <small class="text-muted">(常に必須)</small>
            <% end %>
            <%= form.text_area :content, class: "form-control flex-grow-1 #{'is-invalid' if post.errors[:content].any?}",
                               id: "contentTextarea", required: true, style: "overflow:auto; resize:none;", placeholder: "内容を入力してください" %>
            <div class="invalid-feedback">
              内容を入力してください。
            </div>
          </div>

          <!-- 投稿・キャンセル（入力欄の下／2列レイアウト） -->
          <div class="mb-3 sticky-actions">
            <div class="row g-2">
              <div class="col-6">
                <%= form.submit post.persisted? ? "更新" : "投稿",
                                class: "btn btn-primary w-100",
                                name: "commit",
                                onclick: "document.getElementById('post_status').value = 'published';" %>
              </div>
              <div class="col-6">
                <%= link_to "キャンセル", posts_path, class: "btn btn-secondary w-100" %>
              </div>
            </div>
            <%= form.hidden_field :status, id: "post_status", value: post.status || "published" %>
          </div>

        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
    // JavaScriptコードを即座に実行するように修正
    (function() {
        // CSRFトークンを取得
        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        // カテゴリー管理機能
        function initializeCategoryForm() {
            console.log('Initializing category form...'); // デバッグ用

            const addCategoryBtn = document.getElementById('addCategoryBtn');
            const newCategoryForm = document.getElementById('newCategoryForm');
            const saveCategoryBtn = document.getElementById('saveCategoryBtn');
            const cancelCategoryBtn = document.getElementById('cancelCategoryBtn');
            const categorySelect = document.getElementById('categorySelect');
            const newCategoryName = document.getElementById('newCategoryName');
            const newCategoryDescription = document.getElementById('newCategoryDescription');
            const categoryError = document.getElementById('categoryError');
            const categorySuccess = document.getElementById('categorySuccess');

            console.log('Elements found:', {
                addCategoryBtn: !!addCategoryBtn,
                newCategoryForm: !!newCategoryForm,
                saveCategoryBtn: !!saveCategoryBtn,
                cancelCategoryBtn: !!cancelCategoryBtn
            }); // デバッグ用

            if (!addCategoryBtn) {
                console.error('addCategoryBtn not found');
                return;
            }

            // 新しいカテゴリー追加フォームを表示
            addCategoryBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('Add category button clicked'); // デバッグ用

                newCategoryForm.style.display = 'block';
                addCategoryBtn.style.display = 'none';
                newCategoryName.focus();
                hideMessages();
            });

            // カテゴリー追加をキャンセル
            if (cancelCategoryBtn) {
                cancelCategoryBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    newCategoryForm.style.display = 'none';
                    addCategoryBtn.style.display = 'block';
                    clearCategoryForm();
                    hideMessages();
                });
            }

            // 新しいカテゴリーを保存
            if (saveCategoryBtn) {
                saveCategoryBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const name = newCategoryName.value.trim();
                    const description = newCategoryDescription.value.trim();
                    const parentId = document.getElementById('newCategoryParent')?.value || null;

                    if (!name) {
                        showError('カテゴリー名を入力してください。');
                        newCategoryName.focus(); // フォーカスを設定
                        return;
                    }

                    try {
                        saveCategoryBtn.disabled = true;
                        saveCategoryBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 保存中...';

                        const categoryData = {
                            name: name,
                            description: description
                        };
                        
                        if (parentId) {
                            categoryData.parent_id = parseInt(parentId);
                        }

                        const response = await fetch('/categories', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': getCSRFToken(),
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({
                                category: categoryData
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // メインのカテゴリーセレクトボックスに新しいカテゴリーを追加
                            const displayName = data.category.full_name || data.category.name;
                            const option = new Option(displayName, data.category.id, true, true);
                            categorySelect.add(option);

                            // 親カテゴリー選択肢にも新しいカテゴリーを追加
                            const newCategoryParent = document.getElementById('newCategoryParent');
                            if (newCategoryParent) {
                                const parentOption = new Option(displayName, data.category.id);
                                newCategoryParent.add(parentOption);
                            }

                            showSuccess(data.message);

                            // フォームを隠してリセット
                            setTimeout(() => {
                                newCategoryForm.style.display = 'none';
                                addCategoryBtn.style.display = 'block';
                                clearCategoryForm();
                                hideMessages();
                            }, 2000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showError('カテゴリーの作成中にエラーが発生しました。');
                    } finally {
                        saveCategoryBtn.disabled = false;
                        saveCategoryBtn.innerHTML = '<i class="fas fa-save"></i> 保存';
                    }
                });
            }

            // Enterキーで保存
            if (newCategoryName) {
                newCategoryName.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCategoryBtn.click();
                    }
                });
            }

            function clearCategoryForm() {
                if (newCategoryName) newCategoryName.value = '';
                if (newCategoryDescription) newCategoryDescription.value = '';
                // 親カテゴリーの選択もリセット
                const newCategoryParent = document.getElementById('newCategoryParent');
                if (newCategoryParent) newCategoryParent.value = '';
            }

            function showError(message) {
                if (categoryError) {
                    categoryError.textContent = message;
                    categoryError.style.display = 'block';
                }
                if (categorySuccess) {
                    categorySuccess.style.display = 'none';
                }
            }

            function showSuccess(message) {
                if (categorySuccess) {
                    categorySuccess.textContent = message;
                    categorySuccess.style.display = 'block';
                }
                if (categoryError) {
                    categoryError.style.display = 'none';
                }
            }

            function hideMessages() {
                if (categoryError) categoryError.style.display = 'none';
                if (categorySuccess) categorySuccess.style.display = 'none';
            }
        }

        // DOM読み込み完了時とTurboロード時に初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeCategoryForm);
        } else {
            initializeCategoryForm();
        }

        document.addEventListener('turbo:load', initializeCategoryForm);

        // 投稿タイプフォームの初期化
        function initializePostTypeForm() {
            const addPostTypeBtn = document.getElementById('addPostTypeBtn');
            const newPostTypeForm = document.getElementById('newPostTypeForm');
            const cancelPostTypeBtn = document.getElementById('cancelPostTypeBtn');
            const savePostTypeBtn = document.getElementById('savePostTypeBtn');
            const newPostTypeName = document.getElementById('newPostTypeName');
            const newPostTypeDescription = document.getElementById('newPostTypeDescription');
            const postTypeError = document.getElementById('postTypeError');
            const postTypeSuccess = document.getElementById('postTypeSuccess');
            const postTypeSelect = document.getElementById('postTypeSelect');

            if (!addPostTypeBtn || !newPostTypeForm || !postTypeSelect) return;

            // 「追加」ボタンクリック時
            addPostTypeBtn.addEventListener('click', function(e) {
                e.preventDefault();
                newPostTypeForm.style.display = 'block';
                addPostTypeBtn.style.display = 'none';
                if (newPostTypeName) newPostTypeName.focus();
                hidePostTypeMessages();
            });

            // 「キャンセル」ボタンクリック時
            if (cancelPostTypeBtn) {
                cancelPostTypeBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    newPostTypeForm.style.display = 'none';
                    addPostTypeBtn.style.display = 'block';
                    clearPostTypeForm();
                    hidePostTypeMessages();
                });
            }

            // 「保存」ボタンクリック時
            if (savePostTypeBtn) {
                savePostTypeBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    hidePostTypeMessages();

                    const name = newPostTypeName?.value?.trim();
                    const description = newPostTypeDescription?.value?.trim();

                    if (!name) {
                        showPostTypeError('投稿タイプ名を入力してください。');
                        newPostTypeName.focus(); // フォーカスを設定
                        return;
                    }

                    try {
                        savePostTypeBtn.disabled = true;
                        savePostTypeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 保存中...';

                        const response = await fetch('/post_types', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': getCSRFToken(),
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({
                                post_type: {
                                    name: name,
                                    description: description
                                }
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // メインの投稿タイプセレクトボックスに新しい投稿タイプを追加
                            const option = new Option(data.post_type.name, data.post_type.id, true, true);
                            postTypeSelect.add(option);

                            showPostTypeSuccess(data.message);

                            // フォームを隠してリセット
                            setTimeout(() => {
                                newPostTypeForm.style.display = 'none';
                                addPostTypeBtn.style.display = 'block';
                                clearPostTypeForm();
                                hidePostTypeMessages();
                            }, 2000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showPostTypeError('投稿タイプの作成中にエラーが発生しました。');
                    } finally {
                        savePostTypeBtn.disabled = false;
                        savePostTypeBtn.innerHTML = '<i class="fas fa-save"></i> 保存';
                    }
                });
            }

            // Enterキーで保存
            if (newPostTypeName) {
                newPostTypeName.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        savePostTypeBtn.click();
                    }
                });
            }

            function clearPostTypeForm() {
                if (newPostTypeName) newPostTypeName.value = '';
                if (newPostTypeDescription) newPostTypeDescription.value = '';
            }

            function showPostTypeError(message) {
                if (postTypeError) {
                    postTypeError.textContent = message;
                    postTypeError.style.display = 'block';
                }
                if (postTypeSuccess) {
                    postTypeSuccess.style.display = 'none';
                }
            }

            function showPostTypeSuccess(message) {
                if (postTypeSuccess) {
                    postTypeSuccess.textContent = message;
                    postTypeSuccess.style.display = 'block';
                }
                if (postTypeError) {
                    postTypeError.style.display = 'none';
                }
            }

            function hidePostTypeMessages() {
                if (postTypeError) postTypeError.style.display = 'none';
                if (postTypeSuccess) postTypeSuccess.style.display = 'none';
            }
        }

        // DOM読み込み完了時とTurboロード時に初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializePostTypeForm);
        } else {
            initializePostTypeForm();
        }

        document.addEventListener('turbo:load', initializePostTypeForm);

        // 既存のコード（フォームとテキストエリアの高さ調整、画像プレビューなど）
        function adjustLayout() {
            const formContainer = document.getElementById('formContainer');
            const textarea = document.getElementById('contentTextarea');

            if (formContainer && textarea) {
                // Let the page scroll naturally; do not fix the container height
                if (formContainer.style.height) formContainer.style.height = '';

                // Fill the viewport vertically (at least), and grow further to fit content
                // Buttons are now directly under the content, so no need to reserve space for a fixed bar or footer
                const minHeight = 260; // px (increase base size)
                textarea.style.height = 'auto';
                const rect = textarea.getBoundingClientRect();
                const extraPadding = 16; // small bottom padding
                const actions = document.querySelector('#formContainer .sticky-actions');
                const actionsHeight = actions ? actions.getBoundingClientRect().height : 0;
                const footer = document.querySelector('footer');
                const footerHeight = footer ? footer.getBoundingClientRect().height : 0;
                const verticalPadding = actionsHeight + footerHeight + extraPadding;
                const availableViewport = Math.max(0, window.innerHeight - rect.top - verticalPadding);
                // Fill the available viewport (without exceeding it), regardless of current content length
                const desiredHeight = Math.min(availableViewport, Math.max(minHeight, availableViewport, textarea.scrollHeight));
                textarea.style.height = desiredHeight + 'px';
                textarea.style.overflow = 'auto';
            }
        }

        function initializeLayout() {
            setTimeout(adjustLayout, 50);
            const textarea = document.getElementById('contentTextarea');
            if (textarea) {
                const autoResize = () => {
                    textarea.style.height = 'auto';
                    const minHeight = 260;
                    const rect = textarea.getBoundingClientRect();
                    const extraPadding = 16;
                    const actions = document.querySelector('#formContainer .sticky-actions');
                    const actionsHeight = actions ? actions.getBoundingClientRect().height : 0;
                    const footer = document.querySelector('footer');
                    const footerHeight = footer ? footer.getBoundingClientRect().height : 0;
                    const verticalPadding = actionsHeight + footerHeight + extraPadding;
                    const availableViewport = Math.max(0, window.innerHeight - rect.top - verticalPadding);
                    // Fill the available viewport while respecting small screens
                    const desiredHeight = Math.min(availableViewport, Math.max(minHeight, availableViewport, textarea.scrollHeight));
                    textarea.style.height = desiredHeight + 'px';
                };
                textarea.addEventListener('input', autoResize);
            }
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeLayout);
        } else {
            initializeLayout();
        }

        // Ensure re-initialization after Turbo navigation
        document.addEventListener('turbo:load', initializeLayout);

        window.addEventListener('resize', adjustLayout);

        // テキストエリアのカーソル位置に文字列を挿入
        function insertAtCursor(textarea, text) {
            if (!textarea) return;
            const start = textarea.selectionStart ?? textarea.value.length;
            const end = textarea.selectionEnd ?? textarea.value.length;
            const before = textarea.value.substring(0, start);
            const after = textarea.value.substring(end);
            textarea.value = before + text + after;
            const newPos = start + text.length;
            textarea.selectionStart = textarea.selectionEnd = newPos;
            textarea.focus();
            // 高さの自動調整があればイベントを発火
            textarea.dispatchEvent(new Event('input'));
        }

        // 画像選択時にプレビューなしでMarkdownを自動挿入
        let imageInsertionInitialized = false;

        function initializeImagePreview() {
            if (imageInsertionInitialized) return;

            const imageInput = document.getElementById('imageInput');
            const content = document.getElementById('contentTextarea');
            if (imageInput && content) {
                imageInput.addEventListener('change', function(e) {
                    if (!this.files || this.files.length === 0) return;

                    // 重複挿入防止: 直近の選択内容と同一ならスキップ
                    const names = Array.from(this.files)
                        .filter(f => f.type && f.type.startsWith('image/'))
                        .map(f => f.name);
                    const sig = names.join('|');
                    if (!sig) return;
                    if (this.dataset.lastSig === sig) return;
                    this.dataset.lastSig = sig;

                    const parts = names.map(name => `![${name}](attachment:${name})`);
                    if (parts.length > 0) {
                        const prefix = (content.value && !content.value.endsWith('\n')) ? '\n' : '';
                        insertAtCursor(content, prefix + parts.join('\n') + '\n');
                    }
                });
                imageInsertionInitialized = true;
            }
        }

        // Turbo対応でリセット
        document.addEventListener('turbo:before-visit', function() {
            imageInsertionInitialized = false;
        });

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeImagePreview);
        } else {
            initializeImagePreview();
        }

        document.addEventListener('turbo:load', initializeImagePreview);

        // 動画選択時にプレビューなしでMarkdownを自動挿入
        let videoInsertionInitialized = false;
        function initializeVideoInput() {
            if (videoInsertionInitialized) return;
            const videoInput = document.getElementById('videoInput');
            const content = document.getElementById('contentTextarea');
            if (videoInput && content) {
                videoInput.addEventListener('change', function(e) {
                    if (!this.files || this.files.length === 0) return;
                    const names = Array.from(this.files)
                        .filter(f => f.type && f.type.startsWith('video/'))
                        .map(f => f.name);
                    const sig = names.join('|');
                    if (!sig) return;
                    if (this.dataset.lastSig === sig) return;
                    this.dataset.lastSig = sig;
                    // 動画はMarkdownの画像埋め込みがないため、プレースホルダとしてリンク形式を使用
                    const parts = names.map(name => `[動画 ${name}](attachment:${name})`);
                    if (parts.length > 0) {
                        const prefix = (content.value && !content.value.endsWith('\n')) ? '\n' : '';
                        insertAtCursor(content, prefix + parts.join('\n') + '\n');
                    }
                });
                videoInsertionInitialized = true;
            }
        }
        document.addEventListener('turbo:before-visit', function() { videoInsertionInitialized = false; });
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeVideoInput);
        } else {
            initializeVideoInput();
        }
        document.addEventListener('turbo:load', initializeVideoInput);

        // 既存画像の「内容に挿入」ボタン初期化
        function initializeExistingImageButtons() {
            const buttons = document.querySelectorAll('.insert-existing-image');
            const content = document.getElementById('contentTextarea');
            if (!buttons.length || !content) return;
            buttons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const url = btn.dataset.url;
                    const filename = btn.dataset.filename || 'image';
                    const md = `![${filename}](${url})`;
                    insertAtCursor(content, (content.value && !content.value.endsWith('\n') ? '\n' : '') + md + '\n');
                });
            });
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeExistingImageButtons);
        } else {
            initializeExistingImageButtons();
        }
        document.addEventListener('turbo:load', initializeExistingImageButtons);

        // 既存動画の「内容に挿入」ボタン初期化
        function initializeExistingVideoButtons() {
            const buttons = document.querySelectorAll('.insert-existing-video');
            const content = document.getElementById('contentTextarea');
            if (!buttons.length || !content) return;
            buttons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const url = btn.dataset.url;
                    const filename = btn.dataset.filename || 'video';
                    // シンプルにリンク形式で挿入
                    const md = `[動画 ${filename}](${url})`;
                    insertAtCursor(content, (content.value && !content.value.endsWith('\n') ? '\n' : '') + md + '\n');
                });
            });
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeExistingVideoButtons);
        } else {
            initializeExistingVideoButtons();
        }
        document.addEventListener('turbo:load', initializeExistingVideoButtons);

        // グローバル関数として定義
        window.removeImage = function(index) {
            alert('画像削除機能は後で実装します');
        };

        // 自動保存機能（5秒間隔）
        function initializeAutoSave() {
            let autoSaveInterval;
            let currentPostId = null;
            let lastSaveData = '';
            
            // フォームデータを取得
            function getFormData() {
                const form = document.querySelector('form[data-turbo="false"]');
                if (!form) return null;
                
                const formData = new FormData();
                
                // 基本フィールドを収集
                const fields = ['title', 'content', 'purpose', 'target_audience', 'key_points', 'expected_outcome'];
                fields.forEach(fieldName => {
                    const field = form.querySelector(`[name="post[${fieldName}]"]`);
                    if (field && field.value.trim()) {
                        formData.append(fieldName, field.value.trim());
                    }
                });
                
                // セレクトフィールド
                const categorySelect = form.querySelector('[name="post[category_id]"]');
                if (categorySelect && categorySelect.value) {
                    formData.append('category_id', categorySelect.value);
                }
                
                const postTypeSelect = form.querySelector('[name="post[post_type_id]"]');
                if (postTypeSelect && postTypeSelect.value) {
                    formData.append('post_type_id', postTypeSelect.value);
                }
                
                // 現在の投稿IDがあれば追加
                if (currentPostId) {
                    formData.append('id', currentPostId);
                }
                
                return formData;
            }
            
            // 自動保存実行
            async function performAutoSave() {
                const formData = getFormData();
                if (!formData) return;
                
                // データに変更がない場合はスキップ
                const currentData = Array.from(formData.entries()).sort().toString();
                if (currentData === lastSaveData) return;
                
                try {
                    const response = await fetch('/posts/auto_save', {
                        method: 'POST',
                        headers: {
                            'X-CSRF-Token': getCSRFToken(),
                            'Accept': 'application/json'
                        },
                        body: formData
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        currentPostId = result.post_id;
                        lastSaveData = currentData;
                        showAutoSaveStatus('自動保存完了', 'success');
                        
                        // URLを更新（新規投稿の場合）
                        if (!window.location.pathname.includes('/edit') && currentPostId) {
                            history.replaceState(null, null, `/posts/${currentPostId}/edit`);
                        }
                    } else {
                        showAutoSaveStatus('自動保存失敗', 'error');
                    }
                } catch (error) {
                    console.error('Auto-save error:', error);
                    showAutoSaveStatus('自動保存エラー', 'error');
                }
            }
            
            // 自動保存ステータス表示
            function showAutoSaveStatus(message, type) {
                let statusDiv = document.getElementById('auto-save-status');
                if (!statusDiv) {
                    statusDiv = document.createElement('div');
                    statusDiv.id = 'auto-save-status';
                    statusDiv.style.cssText = `
                        position: fixed;
                        top: 80px;
                        right: 20px;
                        padding: 8px 12px;
                        border-radius: 4px;
                        font-size: 12px;
                        z-index: 1000;
                        opacity: 0;
                        transition: opacity 0.3s;
                    `;
                    document.body.appendChild(statusDiv);
                }
                
                statusDiv.textContent = message + ' ' + new Date().toLocaleTimeString();
                statusDiv.className = type === 'success' ? 'alert alert-success' : 'alert alert-warning';
                statusDiv.style.opacity = '1';
                
                setTimeout(() => {
                    statusDiv.style.opacity = '0';
                }, 2000);
            }
            
            // 既存の投稿IDを取得（編集モードの場合）
            const urlMatch = window.location.pathname.match(/\/posts\/(\d+)\/edit/);
            if (urlMatch) {
                currentPostId = urlMatch[1];
            }
            
            // 5秒間隔で自動保存開始
            autoSaveInterval = setInterval(performAutoSave, 5000);
            
            // ページ離脱時にクリア
            window.addEventListener('beforeunload', () => {
                if (autoSaveInterval) {
                    clearInterval(autoSaveInterval);
                }
            });
        }
        
        // 自動保存初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeAutoSave);
        } else {
            initializeAutoSave();
        }
        
        document.addEventListener('turbo:load', initializeAutoSave);
    })();
</script>