
<div class="row">
  <div class="col-12">
    <%= form_with model: post, local: true, multipart: true, class: "needs-validation", novalidate: true, data: { turbo: false } do |form| %>
      <% if post.errors.any? %>
        <div class="alert alert-danger">
          <h4><%= pluralize(post.errors.count, "error") %> prohibited this post from being saved:</h4>
          <ul>
            <% post.errors.full_messages.each do |message| %>
              <li><%= message %></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <div class="row" id="formContainer">
        <!-- サイドバー（左側） -->
        <div class="col-md-4" style="height: 100%; overflow-y: auto;">
          <!-- 投稿の目的と構造 -->
          <div class="mb-3">
            <%= form.label :post_type_id, "投稿タイプ", class: "form-label" %>
            <div class="d-flex gap-2 mb-2">
              <%= form.collection_select :post_type_id, PostType.all.order(:name), :id, :name,
                                         { prompt: "投稿タイプを選択してください" },
                                         { class: "form-select", id: "postTypeSelect" } %>
              <button type="button" class="btn btn-outline-primary btn-sm" id="addPostTypeBtn" style="white-space: nowrap;">
                <i class="fas fa-plus"></i> 追加
              </button>
            </div>

            <!-- 新規投稿タイプ追加フォーム（初期は非表示） -->
            <div id="newPostTypeForm" class="card" style="display: none;">
              <div class="card-body p-3">
                <h6 class="card-title">新しい投稿タイプを追加</h6>
                <div class="mb-2">
                  <label for="newPostTypeName" class="form-label form-label-sm">投稿タイプ名</label>
                  <input type="text" id="newPostTypeName" name="newPostTypeName" class="form-control form-control-sm"
                         placeholder="投稿タイプ名" maxlength="50">
                </div>
                <div class="mb-2">
                  <label for="newPostTypeDescription" class="form-label form-label-sm">説明（任意）</label>
                  <textarea id="newPostTypeDescription" class="form-control form-control-sm"
                            placeholder="説明（任意）" rows="2" maxlength="200"></textarea>
                </div>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-success btn-sm" id="savePostTypeBtn">
                    <i class="fas fa-save"></i> 保存
                  </button>
                  <button type="button" class="btn btn-secondary btn-sm" id="cancelPostTypeBtn">
                    キャンセル
                  </button>
                </div>
                <div id="postTypeError" class="alert alert-danger mt-2" style="display: none;"></div>
                <div id="postTypeSuccess" class="alert alert-success mt-2" style="display: none;"></div>
              </div>
            </div>
            <div class="form-text">この投稿の主な目的を選択してください。</div>
          </div>

          <div class="mb-3">
            <%= form.label :purpose, "投稿の目的", class: "form-label" %>
            <%= form.text_area :purpose, class: "form-control", rows: 2, required: true,
                               placeholder: "例: Railsの基本的な使い方を初心者に分かりやすく説明したい" %>
            <div class="form-text">この投稿で何を伝えたいか、具体的な目的を記入してください。</div>
          </div>

          <div class="mb-3">
            <%= form.label :target_audience, "対象読者", class: "form-label" %>
            <%= form.text_field :target_audience, class: "form-control", required: true,
                                placeholder: "例: プログラミング初心者、Rails学習者" %>
            <div class="form-text">どのような読者に向けた内容かを記入してください。</div>
          </div>

          <div class="mb-3">
            <%= form.label :key_points, "要点・ポイント", class: "form-label" %>
            <%= form.text_area :key_points, class: "form-control", rows: 3,
                               placeholder: "例: 1. 環境構築の手順&#10;2. 基本的なコマンドの使い方&#10;3. よくあるエラーとその対処法" %>
            <div class="form-text">読者に伝えたい主要なポイントを箇条書きで記入してください。</div>
          </div>

          <div class="mb-3">
            <%= form.label :expected_outcome, "期待する成果", class: "form-label" %>
            <%= form.text_area :expected_outcome, class: "form-control", rows: 2,
                               placeholder: "例: 読者がRailsの基本的な開発環境を構築できるようになる" %>
            <div class="form-text">この投稿を読んだ後、読者にどうなってほしいかを記入してください。</div>
          </div>

          <!-- カテゴリー選択と新規追加（階層構造対応） -->
          <div class="mb-3">
            <%= form.label :category_id, "カテゴリー", class: "form-label" %>
            <div class="d-flex gap-2 mb-2">
              <%= form.collection_select :category_id, Category.all.order(:name), :id, :full_name,
                                         { prompt: "カテゴリーを選択してください" },
                                         { class: "form-select", id: "categorySelect" } %>
              <button type="button" class="btn btn-outline-primary btn-sm" id="addCategoryBtn" style="white-space: nowrap;">
                <i class="fas fa-plus"></i> 追加
              </button>
            </div>

            <!-- 新規カテゴリー追加フォーム（階層構造対応・初期は非表示） -->
            <div id="newCategoryForm" class="card" style="display: none;">
              <div class="card-body p-3">
                <h6 class="card-title">新しいカテゴリーを追加</h6>
                <div class="mb-2">
                  <label for="newCategoryParent" class="form-label form-label-sm">親カテゴリー（任意）</label>
                  <select id="newCategoryParent" class="form-select form-select-sm">
                    <option value="">-- ルートカテゴリーとして作成 --</option>
                    <% Category.all.order(:name).each do |category| %>
                      <option value="<%= category.id %>"><%= category.full_name %></option>
                    <% end %>
                  </select>
                </div>
                <div class="mb-2">
                  <label for="newCategoryName" class="form-label form-label-sm">カテゴリー名</label>
                  <input type="text" id="newCategoryName" name="newCategoryName" class="form-control form-control-sm"
                         placeholder="カテゴリー名" maxlength="50">
                </div>
                <div class="mb-2">
                  <label for="newCategoryDescription" class="form-label form-label-sm">説明（任意）</label>
                  <textarea id="newCategoryDescription" class="form-control form-control-sm"
                            placeholder="説明（任意）" rows="2" maxlength="200"></textarea>
                </div>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-success btn-sm" id="saveCategoryBtn">
                    <i class="fas fa-save"></i> 保存
                  </button>
                  <button type="button" class="btn btn-secondary btn-sm" id="cancelCategoryBtn">
                    キャンセル
                  </button>
                </div>
                <div id="categoryError" class="alert alert-danger mt-2" style="display: none;"></div>
                <div id="categorySuccess" class="alert alert-success mt-2" style="display: none;"></div>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <%= form.label :tag_list, "タグ（カンマ区切り）", class: "form-label" %>
            <%= form.text_field :tag_list, class: "form-control",
                                placeholder: "例: Ruby, Rails, プログラミング" %>
            <div class="form-text">タグをカンマで区切って入力してください。</div>
          </div>

          <!-- 画像アップロード（複数対応） -->
          <div class="mb-3">
            <%= form.label :images, "画像", class: "form-label" %>
            <%= form.file_field :images, multiple: true, accept: "image/*",
                                class: "form-control", id: "imageInput" %>
            <div class="form-text">複数の画像を選択できます（PNG, JPG, GIF形式）</div>
          </div>

          <!-- 画像プレビュー -->
          <div id="imagePreview" class="mb-3"></div>

          <!-- 既存画像の表示（編集時） -->
          <% if post.images.attached? %>
            <div class="mb-3">
              <label class="form-label">現在の画像:</label>
              <div class="row">
                <% post.images.each_with_index do |image, index| %>
                  <div class="col-12 mb-2">
                    <%= image_tag image, class: "img-thumbnail", style: "width: 100%; height: 150px; object-fit: cover;" %>
                    <div class="mt-1">
                      <%= link_to "削除", "#", class: "btn btn-sm btn-outline-danger",
                                  onclick: "removeImage(#{index}); return false;" %>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>

          <div class="mb-3">
            <div class="d-flex gap-2 mb-2">
              <%= form.submit post.persisted? ? "更新" : "投稿",
                              class: "btn btn-primary flex-fill",
                              name: "commit",
                              onclick: "document.getElementById('post_status').value = 'published';" %>
              <%= form.submit post.persisted? ? "下書きで更新" : "下書きに保存",
                              class: "btn btn-outline-secondary flex-fill",
                              name: "draft_commit",
                              onclick: "document.getElementById('post_status').value = 'draft';" %>
            </div>
            <%= form.hidden_field :status, id: "post_status", value: post.status || "published" %>
            <%= link_to "キャンセル", posts_path, class: "btn btn-secondary w-100" %>
          </div>
        </div>

        <!-- メインコンテンツ（右側） -->
        <div class="col-md-8 d-flex flex-column" style="height: 100%;">
          <div class="mb-3">
            <%= form.label :title, class: "form-label" %>
            <%= form.text_field :title, class: "form-control", required: true %>
            <div class="invalid-feedback">
              タイトルを入力してください。
            </div>
          </div>

          <div class="mb-3 flex-grow-1 d-flex flex-column">
            <%= form.label :content, class: "form-label" %>
            <%= form.text_area :content, class: "form-control flex-grow-1",
                               id: "contentTextarea", required: true,
                               style: "min-height: 400px; resize: none;" %>
            <div class="invalid-feedback">
              内容を入力してください。
            </div>
          </div>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
    // JavaScriptコードを即座に実行するように修正
    (function() {
        // CSRFトークンを取得
        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        // カテゴリー管理機能
        function initializeCategoryForm() {
            console.log('Initializing category form...'); // デバッグ用

            const addCategoryBtn = document.getElementById('addCategoryBtn');
            const newCategoryForm = document.getElementById('newCategoryForm');
            const saveCategoryBtn = document.getElementById('saveCategoryBtn');
            const cancelCategoryBtn = document.getElementById('cancelCategoryBtn');
            const categorySelect = document.getElementById('categorySelect');
            const newCategoryName = document.getElementById('newCategoryName');
            const newCategoryDescription = document.getElementById('newCategoryDescription');
            const categoryError = document.getElementById('categoryError');
            const categorySuccess = document.getElementById('categorySuccess');

            console.log('Elements found:', {
                addCategoryBtn: !!addCategoryBtn,
                newCategoryForm: !!newCategoryForm,
                saveCategoryBtn: !!saveCategoryBtn,
                cancelCategoryBtn: !!cancelCategoryBtn
            }); // デバッグ用

            if (!addCategoryBtn) {
                console.error('addCategoryBtn not found');
                return;
            }

            // 新しいカテゴリー追加フォームを表示
            addCategoryBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('Add category button clicked'); // デバッグ用

                newCategoryForm.style.display = 'block';
                addCategoryBtn.style.display = 'none';
                newCategoryName.focus();
                hideMessages();
            });

            // カテゴリー追加をキャンセル
            if (cancelCategoryBtn) {
                cancelCategoryBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    newCategoryForm.style.display = 'none';
                    addCategoryBtn.style.display = 'block';
                    clearCategoryForm();
                    hideMessages();
                });
            }

            // 新しいカテゴリーを保存
            if (saveCategoryBtn) {
                saveCategoryBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const name = newCategoryName.value.trim();
                    const description = newCategoryDescription.value.trim();
                    const parentId = document.getElementById('newCategoryParent')?.value || null;

                    if (!name) {
                        showError('カテゴリー名を入力してください。');
                        newCategoryName.focus(); // フォーカスを設定
                        return;
                    }

                    try {
                        saveCategoryBtn.disabled = true;
                        saveCategoryBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 保存中...';

                        const categoryData = {
                            name: name,
                            description: description
                        };
                        
                        if (parentId) {
                            categoryData.parent_id = parseInt(parentId);
                        }

                        const response = await fetch('/categories', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': getCSRFToken(),
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({
                                category: categoryData
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // メインのカテゴリーセレクトボックスに新しいカテゴリーを追加
                            const displayName = data.category.full_name || data.category.name;
                            const option = new Option(displayName, data.category.id, true, true);
                            categorySelect.add(option);

                            // 親カテゴリー選択肢にも新しいカテゴリーを追加
                            const newCategoryParent = document.getElementById('newCategoryParent');
                            if (newCategoryParent) {
                                const parentOption = new Option(displayName, data.category.id);
                                newCategoryParent.add(parentOption);
                            }

                            showSuccess(data.message);

                            // フォームを隠してリセット
                            setTimeout(() => {
                                newCategoryForm.style.display = 'none';
                                addCategoryBtn.style.display = 'block';
                                clearCategoryForm();
                                hideMessages();
                            }, 2000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showError('カテゴリーの作成中にエラーが発生しました。');
                    } finally {
                        saveCategoryBtn.disabled = false;
                        saveCategoryBtn.innerHTML = '<i class="fas fa-save"></i> 保存';
                    }
                });
            }

            // Enterキーで保存
            if (newCategoryName) {
                newCategoryName.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        saveCategoryBtn.click();
                    }
                });
            }

            function clearCategoryForm() {
                if (newCategoryName) newCategoryName.value = '';
                if (newCategoryDescription) newCategoryDescription.value = '';
                // 親カテゴリーの選択もリセット
                const newCategoryParent = document.getElementById('newCategoryParent');
                if (newCategoryParent) newCategoryParent.value = '';
            }

            function showError(message) {
                if (categoryError) {
                    categoryError.textContent = message;
                    categoryError.style.display = 'block';
                }
                if (categorySuccess) {
                    categorySuccess.style.display = 'none';
                }
            }

            function showSuccess(message) {
                if (categorySuccess) {
                    categorySuccess.textContent = message;
                    categorySuccess.style.display = 'block';
                }
                if (categoryError) {
                    categoryError.style.display = 'none';
                }
            }

            function hideMessages() {
                if (categoryError) categoryError.style.display = 'none';
                if (categorySuccess) categorySuccess.style.display = 'none';
            }
        }

        // DOM読み込み完了時とTurboロード時に初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeCategoryForm);
        } else {
            initializeCategoryForm();
        }

        document.addEventListener('turbo:load', initializeCategoryForm);

        // 投稿タイプフォームの初期化
        function initializePostTypeForm() {
            const addPostTypeBtn = document.getElementById('addPostTypeBtn');
            const newPostTypeForm = document.getElementById('newPostTypeForm');
            const cancelPostTypeBtn = document.getElementById('cancelPostTypeBtn');
            const savePostTypeBtn = document.getElementById('savePostTypeBtn');
            const newPostTypeName = document.getElementById('newPostTypeName');
            const newPostTypeDescription = document.getElementById('newPostTypeDescription');
            const postTypeError = document.getElementById('postTypeError');
            const postTypeSuccess = document.getElementById('postTypeSuccess');
            const postTypeSelect = document.getElementById('postTypeSelect');

            if (!addPostTypeBtn || !newPostTypeForm || !postTypeSelect) return;

            // 「追加」ボタンクリック時
            addPostTypeBtn.addEventListener('click', function(e) {
                e.preventDefault();
                newPostTypeForm.style.display = 'block';
                addPostTypeBtn.style.display = 'none';
                if (newPostTypeName) newPostTypeName.focus();
                hidePostTypeMessages();
            });

            // 「キャンセル」ボタンクリック時
            if (cancelPostTypeBtn) {
                cancelPostTypeBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    newPostTypeForm.style.display = 'none';
                    addPostTypeBtn.style.display = 'block';
                    clearPostTypeForm();
                    hidePostTypeMessages();
                });
            }

            // 「保存」ボタンクリック時
            if (savePostTypeBtn) {
                savePostTypeBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    hidePostTypeMessages();

                    const name = newPostTypeName?.value?.trim();
                    const description = newPostTypeDescription?.value?.trim();

                    if (!name) {
                        showPostTypeError('投稿タイプ名を入力してください。');
                        newPostTypeName.focus(); // フォーカスを設定
                        return;
                    }

                    try {
                        savePostTypeBtn.disabled = true;
                        savePostTypeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 保存中...';

                        const response = await fetch('/post_types', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': getCSRFToken(),
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({
                                post_type: {
                                    name: name,
                                    description: description
                                }
                            })
                        });

                        const data = await response.json();

                        if (data.success) {
                            // メインの投稿タイプセレクトボックスに新しい投稿タイプを追加
                            const option = new Option(data.post_type.name, data.post_type.id, true, true);
                            postTypeSelect.add(option);

                            showPostTypeSuccess(data.message);

                            // フォームを隠してリセット
                            setTimeout(() => {
                                newPostTypeForm.style.display = 'none';
                                addPostTypeBtn.style.display = 'block';
                                clearPostTypeForm();
                                hidePostTypeMessages();
                            }, 2000);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showPostTypeError('投稿タイプの作成中にエラーが発生しました。');
                    } finally {
                        savePostTypeBtn.disabled = false;
                        savePostTypeBtn.innerHTML = '<i class="fas fa-save"></i> 保存';
                    }
                });
            }

            // Enterキーで保存
            if (newPostTypeName) {
                newPostTypeName.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        savePostTypeBtn.click();
                    }
                });
            }

            function clearPostTypeForm() {
                if (newPostTypeName) newPostTypeName.value = '';
                if (newPostTypeDescription) newPostTypeDescription.value = '';
            }

            function showPostTypeError(message) {
                if (postTypeError) {
                    postTypeError.textContent = message;
                    postTypeError.style.display = 'block';
                }
                if (postTypeSuccess) {
                    postTypeSuccess.style.display = 'none';
                }
            }

            function showPostTypeSuccess(message) {
                if (postTypeSuccess) {
                    postTypeSuccess.textContent = message;
                    postTypeSuccess.style.display = 'block';
                }
                if (postTypeError) {
                    postTypeError.style.display = 'none';
                }
            }

            function hidePostTypeMessages() {
                if (postTypeError) postTypeError.style.display = 'none';
                if (postTypeSuccess) postTypeSuccess.style.display = 'none';
            }
        }

        // DOM読み込み完了時とTurboロード時に初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializePostTypeForm);
        } else {
            initializePostTypeForm();
        }

        document.addEventListener('turbo:load', initializePostTypeForm);

        // 既存のコード（フォームとテキストエリアの高さ調整、画像プレビューなど）
        function adjustLayout() {
            const formContainer = document.getElementById('formContainer');
            const textarea = document.getElementById('contentTextarea');

            if (formContainer && textarea) {
                const windowHeight = window.innerHeight;
                const navHeight = document.querySelector('nav') ? document.querySelector('nav').offsetHeight : 60;
                const headerHeight = 100;
                const footerHeight = document.querySelector('footer') ? document.querySelector('footer').offsetHeight : 60;
                const mainPadding = 32;
                const titleSectionHeight = 80;
                const labelHeight = 30;
                const padding = 20;

                const availableHeight = windowHeight - navHeight - headerHeight - footerHeight - mainPadding;
                formContainer.style.height = Math.max(500, availableHeight) + 'px';

                const textareaHeight = availableHeight - titleSectionHeight - labelHeight - padding;
                textarea.style.height = Math.max(300, textareaHeight) + 'px';
            }
        }

        function initializeLayout() {
            setTimeout(adjustLayout, 100);
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeLayout);
        } else {
            initializeLayout();
        }

        window.addEventListener('resize', adjustLayout);

        // 画像プレビュー機能（重複登録を防ぐフラグ付き）
        let imagePreviewInitialized = false;

        function initializeImagePreview() {
            if (imagePreviewInitialized) return;
            
            const imageInput = document.getElementById('imageInput');
            if (imageInput) {
                imageInput.addEventListener('change', function(e) {
                    const preview = document.getElementById('imagePreview');
                    if (preview) {
                        preview.innerHTML = '';

                        if (this.files) {
                            Array.from(this.files).forEach((file, index) => {
                                if (file.type.startsWith('image/')) {
                                    const reader = new FileReader();
                                    reader.onload = function(e) {
                                        const div = document.createElement('div');
                                        div.className = 'col-12 mb-2';
                                        div.innerHTML = `
                                            <img src="${e.target.result}" class="img-thumbnail" style="width: 100%; height: 150px; object-fit: cover;">
                                            <div class="mt-1">
                                              <small class="text-muted">${file.name}</small>
                                            </div>
                                          `;
                                        preview.appendChild(div);
                                    };
                                    reader.readAsDataURL(file);
                                }
                            });
                        }
                    }
                });
                imagePreviewInitialized = true;
            }
        }

        // Turbo対応でリセット
        document.addEventListener('turbo:before-visit', function() {
            imagePreviewInitialized = false;
        });

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeImagePreview);
        } else {
            initializeImagePreview();
        }

        document.addEventListener('turbo:load', initializeImagePreview);

        // グローバル関数として定義
        window.removeImage = function(index) {
            alert('画像削除機能は後で実装します');
        };
    })();
</script>