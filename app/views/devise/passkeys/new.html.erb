<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h3 class="text-center mb-0">
            <i class="fas fa-key me-2"></i>パスキー認証の設定
          </h3>
        </div>
        <div class="card-body">
          <% if @first_time %>
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              アカウント登録が完了しました！セキュリティを強化するため、パスキー認証の設定をお勧めします。
            </div>
          <% end %>

          <p class="text-muted mb-4">
            パスキーを使用すると、パスワードなしで安全にログインできます。
            顔認証、指紋認証、またはセキュリティキーを使用して認証を行います。
          </p>

          <div class="mb-3">
            <label for="passkey-label" class="form-label">デバイス名（任意）</label>
            <input type="text" class="form-control" id="passkey-label" placeholder="例: iPhone、MacBook Pro" maxlength="50">
            <div class="form-text">このパスキーを識別するための名前を入力してください。</div>
          </div>

          <div class="d-grid gap-2">
            <button id="register-passkey" class="btn btn-primary btn-lg">
              <i class="fas fa-fingerprint me-2"></i>パスキーを登録
            </button>
            <% if @first_time %>
              <%= link_to "後で設定する", root_path, class: "btn btn-outline-secondary" %>
            <% else %>
              <%= link_to "キャンセル", user_passkeys_index_path, class: "btn btn-outline-secondary" %>
            <% end %>
          </div>

          <div id="passkey-status" class="mt-3" style="display: none;">
            <div class="alert alert-info">
              <i class="fas fa-spinner fa-spin me-2"></i>パスキーを登録中...
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const registerButton = document.getElementById('register-passkey');
        const statusDiv = document.getElementById('passkey-status');
        const labelInput = document.getElementById('passkey-label');

        if (!registerButton) {
            console.error('Register passkey button not found');
            return;
        }

        registerButton.addEventListener('click', async function() {
            console.log('パスキー登録ボタンがクリックされました');

            // UI更新
            statusDiv.style.display = 'block';
            statusDiv.innerHTML = '<div class="alert alert-info"><i class="fas fa-spinner fa-spin me-2"></i>パスキー登録を準備中...</div>';
            registerButton.disabled = true;

            try {
                // WebAuthnサポートチェック
                if (!navigator.credentials || !navigator.credentials.create) {
                    throw new Error('このブラウザはWebAuthn/パスキーをサポートしていません');
                }

                console.log('WebAuthnサポートを確認しました');

                // CSRFトークンを取得
                const csrfToken = document.querySelector('meta[name="csrf-token"]');
                if (!csrfToken) {
                    throw new Error('CSRF token not found');
                }

                console.log('サーバーから登録オプションを取得中...');
                statusDiv.innerHTML = '<div class="alert alert-info"><i class="fas fa-spinner fa-spin me-2"></i>サーバーと通信中...</div>';

                // サーバーから登録オプションを取得
                const optionsResponse = await fetch('<%= new_user_passkey_path %>.json', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'X-CSRF-Token': csrfToken.content
                    }
                });

                console.log('オプションレスポンス状態:', optionsResponse.status);

                if (!optionsResponse.ok) {
                    const errorText = await optionsResponse.text();
                    console.error('オプション取得エラー:', errorText);
                    throw new Error(`サーバーエラー: ${optionsResponse.status}`);
                }

                const options = await optionsResponse.json();
                console.log('受信したオプション:', options);

                // Base64URL文字列をUint8Arrayに変換する関数
                function base64urlToUint8Array(base64url) {
                    const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
                    const padding = '='.repeat((4 - base64.length % 4) % 4);
                    const binary = atob(base64 + padding);
                    const array = new Uint8Array(binary.length);
                    for (let i = 0; i < binary.length; i++) {
                        array[i] = binary.charCodeAt(i);
                    }
                    return array;
                }

                // Uint8ArrayをBase64URL文字列に変換する関数
                function uint8ArrayToBase64url(array) {
                    const binary = String.fromCharCode.apply(null, array);
                    const base64 = btoa(binary);
                    return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
                }

                // WebAuthn API用にオプションを変換
                const credentialCreationOptions = {
                    publicKey: {
                        challenge: base64urlToUint8Array(options.publicKey.challenge),
                        rp: options.publicKey.rp,
                        user: {
                            id: base64urlToUint8Array(options.publicKey.user.id),
                            name: options.publicKey.user.name,
                            displayName: options.publicKey.user.displayName
                        },
                        pubKeyCredParams: options.publicKey.pubKeyCredParams,
                        authenticatorSelection: options.publicKey.authenticatorSelection || {
                            userVerification: "preferred",
                            requireResidentKey: false,
                            residentKey: "preferred"
                        },
                        timeout: options.publicKey.timeout || 120000,
                        attestation: options.publicKey.attestation || "none"
                    }
                };

                console.log('変換されたオプション:', credentialCreationOptions);

                statusDiv.innerHTML = '<div class="alert alert-info"><i class="fas fa-fingerprint fa-spin me-2"></i>パスキー認証を待機中...</div>';

                // WebAuthn APIを使用してパスキーを作成
                console.log('navigator.credentials.create を呼び出し中...');
                const credential = await navigator.credentials.create(credentialCreationOptions);

                console.log('パスキー作成成功:', credential);

                if (!credential) {
                    throw new Error('認証情報の作成に失敗しました');
                }

                statusDiv.innerHTML = '<div class="alert alert-success"><i class="fas fa-check me-2"></i>パスキー作成成功！サーバーに登録中...</div>';

                // サーバーに送信するためのデータを準備
                const credentialData = {
                    id: credential.id,
                    rawId: uint8ArrayToBase64url(new Uint8Array(credential.rawId)),
                    response: {
                        attestationObject: uint8ArrayToBase64url(new Uint8Array(credential.response.attestationObject)),
                        clientDataJSON: uint8ArrayToBase64url(new Uint8Array(credential.response.clientDataJSON))
                    },
                    type: credential.type
                };

                console.log('サーバーに送信するデータ:', credentialData);

                // ラベルを取得
                const label = labelInput.value.trim() || 'パスキー';

                // サーバーに認証情報を送信
                const submitResponse = await fetch('<%= user_passkeys_path %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-Token': csrfToken.content
                    },
                    body: JSON.stringify({
                        credential: JSON.stringify(credentialData),
                        label: label
                    })
                });

                console.log('サーバー送信レスポンス状態:', submitResponse.status);

                if (submitResponse.ok) {
                    console.log('登録成功、リダイレクト中...');
                    statusDiv.innerHTML = '<div class="alert alert-success"><i class="fas fa-check me-2"></i>パスキー登録完了！</div>';

                    // 成功の場合はリダイレクト
                    setTimeout(() => {
                        window.location.href = '<%= user_passkeys_index_path %>';
                    }, 1000);
                } else {
                    const errorText = await submitResponse.text();
                    console.error('サーバー送信エラー:', errorText);
                    throw new Error('サーバーでの登録に失敗しました');
                }

            } catch (error) {
                console.error('パスキー登録エラー:', error);

                let errorMessage = 'パスキーの登録に失敗しました';

                if (error.name === 'NotAllowedError') {
                    errorMessage = 'パスキー登録がキャンセルされました';
                } else if (error.name === 'NotSupportedError') {
                    errorMessage = 'このデバイスはパスキーをサポートしていません';
                } else if (error.name === 'SecurityError') {
                    errorMessage = 'セキュリティエラーが発生しました。HTTPSが必要です';
                } else if (error.name === 'AbortError') {
                    errorMessage = 'パスキー登録がタイムアウトしました';
                } else if (error.message) {
                    errorMessage = error.message;
                }

                // エラー表示
                statusDiv.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>${errorMessage}
                </div>
            `;

                registerButton.disabled = false;
            }
        });
    });
</script>