
<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4>ログイン</h4>
        </div>
        <div class="card-body">
          <!-- メールアドレス入力フォーム -->
          <div id="email-form">
            <div class="mb-3">
              <label for="email" class="form-label">メールアドレス</label>
              <input type="email" id="email" class="form-control" placeholder="メールアドレスを入力してください" autofocus>
            </div>
            <div class="d-grid gap-2">
              <button type="button" id="check-email" class="btn btn-primary">認証方法を確認</button>
            </div>
          </div>

          <!-- ローディング表示 -->
          <div id="loading" class="text-center" style="display: none;">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">確認中...</span>
            </div>
            <p class="mt-2">認証方法を確認中...</p>
          </div>

          <!-- パスワード認証フォーム -->
          <div id="password-form" style="display: none;">
            <%= form_with url: password_login_webauthn_authentications_path, method: :post, local: true, id: "password-login-form", data: { turbo: false } do |f| %>
              <input type="hidden" id="email-hidden" name="email">

              <div class="alert alert-info">
                <i class="fas fa-key me-2"></i>
                <span id="user-email"></span> でパスワード認証を行います
              </div>

              <div class="mb-3">
                <label for="password" class="form-label">パスワード</label>
                <input type="password" id="password" name="password" class="form-control" required autocomplete="current-password">
              </div>

              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-success">ログイン</button>
                <button type="button" id="back-to-email" class="btn btn-outline-secondary">戻る</button>
              </div>
            <% end %>
          </div>

          <!-- WebAuthn認証 -->
          <div id="webauthn-form" style="display: none;">
            <div class="alert alert-success">
              <i class="fas fa-fingerprint me-2"></i>
              <span id="パスキー-email"></span> でパスキー認証を行います
            </div>

            <div class="d-grid gap-2">
              <button type="button" id="webauthn-login" class="btn btn-primary">
                <i class="fas fa-fingerprint me-2"></i>
                <span id="パスキー-button-text">パスキー認証を開始</span>
              </button>
              <button type="button" id="cancel-webauthn" class="btn btn-outline-danger" style="display: none;">
                認証をキャンセル
              </button>
              <button type="button" id="back-to-email-webauthn" class="btn btn-outline-secondary">戻る</button>
            </div>
          </div>

          <!-- エラーメッセージ -->
          <div id="error-message" class="alert alert-danger" style="display: none;"></div>

          <div class="mt-3 text-center">
            <p><%= link_to "アカウントをお持ちでない方はこちら", new_user_registration_path, class: "text-decoration-none" %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    function initializeLoginForm() {
        const emailInput = document.getElementById('email');
        const checkEmailBtn = document.getElementById('check-email');
        const emailForm = document.getElementById('email-form');
        const passwordForm = document.getElementById('password-form');
        const webauthnForm = document.getElementById('webauthn-form');
        const loading = document.getElementById('loading');
        const errorMessage = document.getElementById('error-message');
        const backToEmailBtn = document.getElementById('back-to-email');
        const backToEmailWebauthnBtn = document.getElementById('back-to-email-webauthn');
        const webauthnLoginBtn = document.getElementById('webauthn-login');
        const cancelWebauthnBtn = document.getElementById('cancel-webauthn');
        const webauthnButtonText = document.getElementById('webauthn-button-text');

        // 既存のイベントリスナーを削除して重複を防ぐ
        [checkEmailBtn, backToEmailBtn, backToEmailWebauthnBtn, webauthnLoginBtn, cancelWebauthnBtn].forEach(btn => {
            if (btn) {
                btn.replaceWith(btn.cloneNode(true));
            }
        });

        // 再取得
        const newCheckEmailBtn = document.getElementById('check-email');
        const newBackToEmailBtn = document.getElementById('back-to-email');
        const newBackToEmailWebauthnBtn = document.getElementById('back-to-email-webauthn');
        const newWebauthnLoginBtn = document.getElementById('webauthn-login');
        const newCancelWebauthnBtn = document.getElementById('cancel-webauthn');

        // CSRFトークンを取得
        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        // WebAuthn認証開始
        if (newWebauthnLoginBtn) {
            newWebauthnLoginBtn.addEventListener('click', function() {
                if (window.webauthnOptions) {
                    startWebAuthnAuthentication(window.webauthnOptions);
                }
            });
        }

        // WebAuthn認証キャンセル
        if (newCancelWebauthnBtn) {
            newCancelWebauthnBtn.addEventListener('click', function() {
                if (window.webauthnHandler) {
                    window.webauthnHandler.abortCurrentAuthentication();
                }
                resetWebAuthnButton();
                showError('認証がキャンセルされました');
            });
        }

        // メールアドレス確認（既存のコードはそのまま）
        if (newCheckEmailBtn) {
            newCheckEmailBtn.addEventListener('click', async function() {
                const email = emailInput.value.trim();

                if (!email) {
                    showError('メールアドレスを入力してください。');
                    return;
                }

                showLoading();

                try {
                    const url = `/login?email=${encodeURIComponent(email)}`;
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': getCSRFToken(),
                            'Accept': 'application/json'
                        },
                        credentials: 'same-origin'
                    });

                    const data = await response.json();
                    hideLoading();

                    if (response.ok) {
                        if (data.webauthn_enabled) {
                            showWebAuthnForm(email, data.webauthn_options);
                        } else {
                            showPasswordForm(email);
                        }
                    } else {
                        showError(data.error || '認証方法の確認に失敗しました。');
                    }
                } catch (error) {
                    hideLoading();
                    console.error('Error:', error);
                    showError('ネットワークエラーが発生しました。');
                }
            });
        }

        // 戻るボタン
        if (newBackToEmailBtn) {
            newBackToEmailBtn.addEventListener('click', resetToEmailForm);
        }
        if (newBackToEmailWebauthnBtn) {
            newBackToEmailWebauthnBtn.addEventListener('click', function() {
                // WebAuthn認証を中断
                if (window.webauthnHandler) {
                    window.webauthnHandler.abortCurrentAuthentication();
                }
                resetToEmailForm();
            });
        }

        // Enterキーでメール確認
        if (emailInput) {
            emailInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    newCheckEmailBtn.click();
                }
            });
        }

        function showWebAuthnForm(email, webauthnOptions) {
            document.getElementById('webauthn-email').textContent = email;
            window.webauthnOptions = webauthnOptions;
            if (emailForm) emailForm.style.display = 'none';
            if (webauthnForm) webauthnForm.style.display = 'block';
        }

        function resetWebAuthnButton() {
            if (webauthnButtonText) webauthnButtonText.textContent = 'WebAuthn認証を開始';
            if (newWebauthnLoginBtn) newWebauthnLoginBtn.disabled = false;
            if (newCancelWebauthnBtn) newCancelWebauthnBtn.style.display = 'none';
        }

        function showWebAuthnInProgress() {
            if (webauthnButtonText) webauthnButtonText.textContent = '認証中...';
            if (newWebauthnLoginBtn) newWebauthnLoginBtn.disabled = true;
            if (newCancelWebauthnBtn) newCancelWebauthnBtn.style.display = 'block';
        }

        async function startWebAuthnAuthentication(options) {
            showWebAuthnInProgress();
            hideError();

            // WebAuthnHandlerを使用
            if (window.webauthnHandler) {
                await window.webauthnHandler.authenticate(
                  options,
                  // 成功時
                  async function(credential) {
                      try {
                          const response = await fetch('/webauthn_authentications', {
                              method: 'POST',
                              headers: {
                                  'Content-Type': 'application/json',
                                  'X-CSRF-Token': getCSRFToken(),
                                  'Accept': 'application/json'
                              },
                              body: JSON.stringify({
                                  credential: {
                                      id: credential.id,
                                      rawId: credential.rawId,
                                      type: credential.type,
                                      response: {
                                          clientDataJSON: credential.response.clientDataJSON,
                                          authenticatorData: credential.response.authenticatorData,
                                          signature: credential.response.signature,
                                          userHandle: credential.response.userHandle
                                      }
                                  }
                              })
                          });

                          const data = await response.json();

                          if (data.success) {
                              window.location.href = data.redirect_url || '/';
                          } else {
                              resetWebAuthnButton();
                              showError(data.error || 'WebAuthn認証に失敗しました');
                          }
                      } catch (error) {
                          resetWebAuthnButton();
                          showError('WebAuthn認証の送信に失敗しました');
                      }
                  },
                  // エラー時
                  function(errorMessage) {
                      resetWebAuthnButton();
                      showError(errorMessage);
                  }
                );
            } else {
                resetWebAuthnButton();
                showError('WebAuthn機能が利用できません');
            }
        }

        // その他のヘルパー関数（既存のコードと同じ）
        function showLoading() {
            if (emailForm) emailForm.style.display = 'none';
            if (passwordForm) passwordForm.style.display = 'none';
            if (webauthnForm) webauthnForm.style.display = 'none';
            if (loading) loading.style.display = 'block';
            hideError();
        }

        function hideLoading() {
            if (loading) loading.style.display = 'none';
        }

        function showPasswordForm(email) {
            document.getElementById('email-hidden').value = email;
            document.getElementById('user-email').textContent = email;
            if (emailForm) emailForm.style.display = 'none';
            if (passwordForm) passwordForm.style.display = 'block';
            document.getElementById('password').focus();
        }

        function resetToEmailForm() {
            if (emailForm) emailForm.style.display = 'block';
            if (passwordForm) passwordForm.style.display = 'none';
            if (webauthnForm) webauthnForm.style.display = 'none';
            hideError();
            resetWebAuthnButton();
            if (emailInput) emailInput.focus();
        }

        function showError(message) {
            if (errorMessage) {
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
            }
        }

        function hideError() {
            if (errorMessage) {
                errorMessage.style.display = 'none';
            }
        }
    }

    // ページ読み込み時とTurboナビゲーション時に初期化
    document.addEventListener('DOMContentLoaded', initializeLoginForm);
    document.addEventListener('turbo:load', initializeLoginForm);
</script>