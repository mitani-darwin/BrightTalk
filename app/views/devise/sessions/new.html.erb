
<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4><i class="fas fa-sign-in-alt me-2"></i>ログイン</h4>
        </div>
        <div class="card-body">
          <!-- エラー・アラートメッセージの表示 -->
          <% if resource.errors.any? %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
              <% resource.errors.full_messages.each do |message| %>
                <div><%= message %></div>
              <% end %>
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
          <% end %>

          <% if notice %>
            <div class="alert alert-info alert-dismissible fade show" role="alert">
              <%= notice %>
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
          <% end %>

          <% if alert %>
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
              <%= alert %>
              <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
          <% end %>

          <%= form_with(model: resource, as: resource_name, url: session_path(resource_name), method: :post, local: true, data: { turbo: false }) do |form| %>
            <div class="mb-3">
              <%= form.label :email, "メールアドレス", class: "form-label" %>
              <%= form.email_field :email, autofocus: true, autocomplete: "email", class: "form-control", id: "user_email", value: resource.email %>
            </div>

            <!-- パスワード入力欄（初期状態では非表示） -->
            <div id="password-section" class="mb-3" style="display: none;">
              <%= form.label :password, "パスワード", class: "form-label" %>
              <%= form.password_field :password, autocomplete: "current-password", class: "form-control", id: "user_password" %>
            </div>

            <!-- Remember me チェックボックス（パスワード認証時のみ表示） -->
            <div id="remember-section" class="mb-3" style="display: none;">
              <div class="form-check">
                <%= form.check_box :remember_me, class: "form-check-input" %>
                <%= form.label :remember_me, "ログイン状態を保持する", class: "form-check-label" %>
              </div>
            </div>

            <!-- ログインボタン -->
            <div class="d-grid gap-2">
              <button type="button" id="check-webauthn-btn" class="btn btn-primary">
                <i class="fas fa-arrow-right me-2"></i>次へ
              </button>

              <button type="submit" id="password-login-btn" class="btn btn-success" style="display: none;">
                <i class="fas fa-key me-2"></i>パスワードでログイン
              </button>
            </div>

            <!-- WebAuthn認証リンク（メール確認後に表示） -->
            <div id="webauthn-section" class="mt-3" style="display: none;">
              <div class="alert alert-info">
                <h6><i class="fas fa-shield-alt me-2"></i>WebAuthn認証が利用可能です</h6>
                <p class="mb-2">このアカウントはWebAuthn認証が有効になっています。</p>
              </div>
              <div class="d-grid gap-2">
                <button type="button" id="webauthn-login-btn" class="btn btn-primary">
                  <i class="fas fa-fingerprint me-2"></i>WebAuthn認証でログイン
                </button>
                <button type="button" id="use-password-btn" class="btn btn-outline-secondary">
                  <i class="fas fa-key me-2"></i>パスワードを使用する
                </button>
              </div>
            </div>

            <!-- エラーメッセージ -->
            <div id="error-message" class="alert alert-danger mt-3" style="display: none;"></div>

            <!-- 処理中表示 -->
            <div id="processing" class="text-center mt-3" style="display: none;">
              <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">確認中...</span>
              </div>
              <span class="ms-2">メールアドレスを確認中...</span>
            </div>
          <% end %>

          <!-- その他のリンク -->
          <%= render "devise/shared/links" %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    // 改良されたBase64URL変換関数
    function base64URLToArrayBuffer(base64url) {
        if (!base64url || typeof base64url !== 'string') {
            throw new Error('Invalid base64url input');
        }

        try {
            // 不正な文字を除去（空白、改行など）
            base64url = base64url.replace(/\s/g, '');

            // Base64URLからBase64に変換
            let base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');

            // パディングを正しく追加
            const padLength = (4 - base64.length % 4) % 4;
            if (padLength > 0) {
                base64 += '='.repeat(padLength);
            }

            // Base64形式の検証
            if (!/^[A-Za-z0-9+/]*=*$/.test(base64)) {
                throw new Error('Invalid base64 format');
            }

            // Base64をデコード
            const binaryString = atob(base64);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        } catch (error) {
            console.error('Base64URL decode error:', error);
            console.error('Input:', base64url);
            throw new Error(`Base64URL decode failed: ${error.message}`);
        }
    }

    function arrayBufferToBase64URL(buffer) {
        if (!buffer) {
            return '';
        }

        try {
            const bytes = new Uint8Array(buffer);
            let binary = '';
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            const base64 = btoa(binary);
            return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
        } catch (error) {
            console.error('Base64URL encode error:', error);
            throw new Error(`Base64URL encode failed: ${error.message}`);
        }
    }

    function startWebAuthnAuthentication(webauthnOptions) {
        console.log('WebAuthn authentication options received:', webauthnOptions);

        if (!webauthnOptions || !webauthnOptions.challenge) {
            throw new Error('Invalid WebAuthn options');
        }

        // WebAuthnオプションを変換
        const convertedOptions = {
            challenge: base64URLToArrayBuffer(webauthnOptions.challenge),
            timeout: webauthnOptions.timeout || 60000,
            userVerification: webauthnOptions.userVerification || 'preferred'
        };

        // allowCredentialsの変換
        if (webauthnOptions.allowCredentials && Array.isArray(webauthnOptions.allowCredentials)) {
            convertedOptions.allowCredentials = webauthnOptions.allowCredentials.map(cred => {
                const credId = typeof cred === 'object' ? cred.id : cred;
                console.log('Converting credential ID:', credId);

                return {
                    type: 'public-key',
                    id: base64URLToArrayBuffer(credId),
                    transports: cred.transports || ['usb', 'nfc', 'ble', 'internal']
                };
            });
        }

        console.log('Converted WebAuthn authentication options:', convertedOptions);

        return navigator.credentials.get({
            publicKey: convertedOptions
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');
        const emailInput = document.getElementById('user_email');
        const passwordInput = document.getElementById('user_password');
        const passwordSection = document.getElementById('password-section');
        const rememberSection = document.getElementById('remember-section');
        const webauthnSection = document.getElementById('webauthn-section');
        const checkWebauthnBtn = document.getElementById('check-webauthn-btn');
        const passwordLoginBtn = document.getElementById('password-login-btn');
        const webauthnLoginBtn = document.getElementById('webauthn-login-btn');
        const usePasswordBtn = document.getElementById('use-password-btn');
        const errorMessage = document.getElementById('error-message');
        const processing = document.getElementById('processing');

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            processing.style.display = 'none';
        }

        function hideError() {
            errorMessage.style.display = 'none';
        }

        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        // フォームの属性を強制的に正しい値に設定する関数
        function fixFormAttributes() {
            if (form) {
                console.log('Fixing form attributes...');
                console.log('Before fix - action:', form.action, 'method:', form.method);

                // 属性を強制設定
                form.setAttribute('action', '/users/sign_in');
                form.setAttribute('method', 'POST');

                console.log('After fix - action:', form.action, 'method:', form.method);

                return true;
            }
            return false;
        }

        // 初期化時にフォーム属性を修正
        fixFormAttributes();

        // デバッグ用：フォームとボタンの存在確認
        console.log('Form elements check:', {
            form: !!form,
            emailInput: !!emailInput,
            passwordInput: !!passwordInput,
            passwordLoginBtn: !!passwordLoginBtn,
            formAction: form ? form.action : 'N/A',
            formMethod: form ? form.method : 'N/A'
        });

        // パスワードログインボタンのイベントリスナーを修正
        passwordLoginBtn.addEventListener('click', function(e) {
            e.preventDefault();

            const email = emailInput.value.trim();
            const password = passwordInput ? passwordInput.value : '';

            console.log('Password login clicked', {
                email,
                passwordProvided: !!password,
                passwordInputExists: !!passwordInput,
                formExists: !!form
            });

            if (!email || !password) {
                showError('メールアドレスとパスワードを入力してください。');
                return;
            }

            hideError();

            console.log('Submitting form...');

            // フォームの属性を再度強制的に正しい値に設定
            if (!fixFormAttributes()) {
                showError('フォームが見つかりません。');
                return;
            }

            // デバッグ: フォームのaction URLを確認
            console.log('Form action (final check):', form.action);
            console.log('Form method (final check):', form.method);

            // FormDataを使用して手動でフォームデータを構築
            const formData = new FormData();
            formData.append('user[email]', email);
            formData.append('user[password]', password);

            // Remember meがチェックされている場合
            const rememberCheckbox = document.getElementById('user_remember_me');
            if (rememberCheckbox && rememberCheckbox.checked) {
                formData.append('user[remember_me]', '1');
            }

            // CSRFトークンを追加
            const csrfToken = getCSRFToken();
            if (csrfToken) {
                formData.append('authenticity_token', csrfToken);
            }

            // デバッグ: 送信するデータを確認
            console.log('Sending form data:');
            for (let [key, value] of formData.entries()) {
                console.log(`  ${key}: ${key.includes('password') ? '[HIDDEN]' : value}`);
            }

            // fetch APIを使用してフォームを送信
            fetch('/users/sign_in', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRF-Token': csrfToken
                },
                credentials: 'same-origin'
            })
              .then(response => {
                  console.log('Response status:', response.status);
                  console.log('Response headers:', response.headers);

                  if (response.ok) {
                      // ログイン成功時はリダイレクト
                      if (response.redirected) {
                          window.location.href = response.url;
                      } else {
                          window.location.href = '/';
                      }
                  } else {
                      // エラーの場合は現在のページをリロードしてエラーメッセージを表示
                      window.location.reload();
                  }
              })
              .catch(error => {
                  console.error('Form submission error:', error);
                  showError('ログイン処理中にエラーが発生しました。');
              });
        });

        checkWebauthnBtn.addEventListener('click', async function() {
            const email = emailInput.value.trim();

            if (!email) {
                showError('メールアドレスを入力してください。');
                return;
            }

            if (!isValidEmail(email)) {
                showError('有効なメールアドレスを入力してください。');
                return;
            }

            hideError();
            processing.style.display = 'block';
            checkWebauthnBtn.disabled = true;

            try {
                const response = await fetch('/check_webauthn', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken()
                    },
                    body: JSON.stringify({ email: email })
                });

                if (!response.ok) {
                    throw new Error('サーバーエラーが発生しました。');
                }

                const data = await response.json();
                processing.style.display = 'none';

                if (data.error) {
                    showError(data.error);
                    checkWebauthnBtn.disabled = false;
                    return;
                }

                if (data.webauthn_enabled) {
                    console.log('WebAuthn enabled for user');
                    webauthnSection.style.display = 'block';
                    checkWebauthnBtn.style.display = 'none';

                    // WebAuthn認証ボタンのクリックイベント（一度だけ設定）
                    webauthnLoginBtn.onclick = async function(e) {
                        e.preventDefault();

                        try {
                            processing.style.display = 'block';
                            hideError();

                            // WebAuthn認証オプションを取得
                            const optionsResponse = await fetch('/webauthn_authentications/new', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': getCSRFToken()
                                },
                                body: JSON.stringify({
                                    email: email,
                                    webauthn_authentication: { email: email }
                                })
                            });

                            if (!optionsResponse.ok) {
                                const errorData = await optionsResponse.json();
                                throw new Error(errorData.error || 'WebAuthn認証オプションの取得に失敗しました。');
                            }

                            const webauthnOptions = await optionsResponse.json();
                            console.log('WebAuthn options received:', webauthnOptions);

                            // WebAuthn認証を実行
                            const credential = await startWebAuthnAuthentication(webauthnOptions);
                            console.log('WebAuthn authentication successful:', credential);

                            // 認証結果をサーバーに送信
                            const authResponse = await fetch('/webauthn_authentications', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': getCSRFToken()
                                },
                                body: JSON.stringify({
                                    credential: {
                                        id: credential.id,
                                        type: credential.type,
                                        rawId: arrayBufferToBase64URL(credential.rawId),
                                        response: {
                                            authenticatorData: arrayBufferToBase64URL(credential.response.authenticatorData),
                                            clientDataJSON: arrayBufferToBase64URL(credential.response.clientDataJSON),
                                            signature: arrayBufferToBase64URL(credential.response.signature),
                                            userHandle: credential.response.userHandle ? arrayBufferToBase64URL(credential.response.userHandle) : null
                                        }
                                    }
                                })
                            });

                            if (authResponse.ok) {
                                const result = await authResponse.json();
                                if (result.success) {
                                    window.location.href = result.redirect_url || '/';
                                } else {
                                    throw new Error(result.error || 'WebAuthn認証に失敗しました。');
                                }
                            } else {
                                const errorData = await authResponse.json();
                                throw new Error(errorData.error || 'WebAuthn認証の処理に失敗しました。');
                            }

                        } catch (error) {
                            console.error('WebAuthn authentication error:', error);
                            processing.style.display = 'none';

                            // WebAuthnの標準エラーメッセージを表示
                            if (error.name === 'NotAllowedError') {
                                showError('WebAuthn認証がキャンセルまたは拒否されました。');
                            } else if (error.name === 'InvalidStateError') {
                                showError('認証器の状態が無効です。');
                            } else if (error.name === 'NotSupportedError') {
                                showError('お使いのブラウザまたはデバイスはWebAuthnをサポートしていません。');
                            } else if (error.name === 'SecurityError') {
                                showError('セキュリティエラーが発生しました。');
                            } else {
                                showError(`WebAuthn認証に失敗しました: ${error.message}`);
                            }
                        }
                    };

                } else {
                    console.log('WebAuthn not enabled for user, showing password login');
                    passwordSection.style.display = 'block';
                    rememberSection.style.display = 'block';
                    passwordLoginBtn.style.display = 'block';
                    checkWebauthnBtn.style.display = 'none';

                    // パスワード入力フィールドにフォーカス
                    if (passwordInput) {
                        passwordInput.focus();
                    }
                }
            } catch (error) {
                console.error('WebAuthn check error:', error);
                processing.style.display = 'none';
                showError('サーバーとの通信でエラーが発生しました。');
            }

            checkWebauthnBtn.disabled = false;
        });

        usePasswordBtn.addEventListener('click', function() {
            webauthnSection.style.display = 'none';
            passwordSection.style.display = 'block';
            rememberSection.style.display = 'block';
            passwordLoginBtn.style.display = 'block';
            checkWebauthnBtn.style.display = 'none';

            if (passwordInput) {
                passwordInput.focus();
            }
        });

        function isValidEmail(email) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailRegex.test(email);
        }

        emailInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (checkWebauthnBtn.style.display !== 'none') {
                    checkWebauthnBtn.click();
                }
            }
        });

        // パスワード入力フィールドでEnterキーを押した時の処理
        if (passwordInput) {
            passwordInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if (passwordLoginBtn.style.display !== 'none') {
                        passwordLoginBtn.click();
                    }
                }
            });
        }

        hideError();
    });
</script>