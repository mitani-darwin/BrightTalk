<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4>ログイン</h4>
        </div>
        <div class="card-body">
          <!-- メールアドレス入力フォーム -->
          <div id="email-form">
            <div class="mb-3">
              <label for="email" class="form-label">メールアドレス</label>
              <input type="email" id="email" class="form-control" placeholder="メールアドレスを入力してください" autofocus>
            </div>
            <div class="d-grid gap-2">
              <button type="button" id="check-email" class="btn btn-primary">認証方法を確認</button>
            </div>
          </div>

          <!-- ローディング表示 -->
          <div id="loading" class="text-center" style="display: none;">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">確認中...</span>
            </div>
            <p class="mt-2">認証方法を確認中...</p>
          </div>

          <!-- パスワード認証フォーム -->
          <div id="password-form" style="display: none;">
            <%= form_with url: password_login_webauthn_authentications_path, method: :post, local: true, id: "password-login-form", data: { turbo: false } do |f| %>
              <input type="hidden" id="email-hidden" name="email">

              <div class="alert alert-info">
                <i class="fas fa-key me-2"></i>
                <span id="user-email"></span> でパスワード認証を行います
              </div>

              <div class="mb-3">
                <label for="password" class="form-label">パスワード</label>
                <input type="password" id="password" name="password" class="form-control" required autocomplete="current-password">
              </div>

              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-success">ログイン</button>
                <button type="button" id="back-to-email" class="btn btn-outline-secondary">戻る</button>
              </div>
            <% end %>
          </div>

          <!-- WebAuthn認証 -->
          <div id="webauthn-form" style="display: none;">
            <div class="alert alert-success">
              <i class="fas fa-fingerprint me-2"></i>
              <span id="webauthn-email"></span> でパスキー認証を行います
            </div>

            <div class="d-grid gap-2">
              <button type="button" id="webauthn-login" class="btn btn-primary">
                <i class="fas fa-fingerprint me-2"></i>
                <span id="webauthn-button-text">パスキー認証を開始</span>
              </button>
              <button type="button" id="cancel-webauthn" class="btn btn-outline-danger" style="display: none;">
                認証をキャンセル
              </button>
              <button type="button" id="back-to-email-webauthn" class="btn btn-outline-secondary">戻る</button>
            </div>
          </div>

          <!-- エラーメッセージ -->
          <div id="error-message" class="alert alert-danger" style="display: none;"></div>

          <div class="mt-3 text-center">
            <p><%= link_to "アカウントをお持ちでない方はこちら", new_user_registration_path, class: "text-decoration-none" %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    function initializeLoginForm() {
        const emailInput = document.getElementById('email');
        const checkEmailBtn = document.getElementById('check-email');
        const emailForm = document.getElementById('email-form');
        const passwordForm = document.getElementById('password-form');
        const webauthnForm = document.getElementById('webauthn-form');
        const loading = document.getElementById('loading');
        const errorMessage = document.getElementById('error-message');
        const backToEmailBtn = document.getElementById('back-to-email');
        const backToEmailWebauthnBtn = document.getElementById('back-to-email-webauthn');
        const webauthnLoginBtn = document.getElementById('webauthn-login');

        // 必須要素の存在チェック
        if (!emailInput || !checkEmailBtn) {
            console.warn('Required login form elements are missing');
            return;
        }

        // すでに初期化済みかチェック
        if (emailInput.dataset.initialized === 'true') {
            return;
        }
        emailInput.dataset.initialized = 'true';

        // CSRFトークンを取得
        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        // WebAuthn関数が利用可能かチェックする関数
        function waitForWebAuthnModule() {
            return new Promise((resolve, reject) => {
                const maxAttempts = 50; // 5秒間待つ
                let attempts = 0;

                const checkModule = () => {
                    attempts++;
                    console.log(`Checking WebAuthn module availability... Attempt ${attempts}/${maxAttempts}`);

                    if (window.startWebAuthnAuthentication && typeof window.startWebAuthnAuthentication === 'function') {
                        console.log('WebAuthn module is ready');
                        resolve();
                    } else if (attempts >= maxAttempts) {
                        console.error('WebAuthn module loading timeout after', attempts, 'attempts');
                        reject(new Error('WebAuthn module loading timeout'));
                    } else {
                        setTimeout(checkModule, 100);
                    }
                };

                checkModule();
            });
        }

        // WebAuthn認証開始
        async function startWebAuthnAuth() {
            console.log('startWebAuthnAuth called');

            if (!window.webauthnOptions) {
                showError('WebAuthn認証オプションが取得できませんでした。');
                return;
            }

            const webauthnButtonText = document.getElementById('webauthn-button-text');
            const cancelWebauthnBtn = document.getElementById('cancel-webauthn');

            // ボタンを認証中状態に
            if (webauthnButtonText) webauthnButtonText.textContent = '認証中...';
            if (webauthnLoginBtn) webauthnLoginBtn.disabled = true;
            if (cancelWebauthnBtn) cancelWebauthnBtn.style.display = 'block';

            hideError();

            try {
                // WebAuthnモジュールが読み込まれるまで待つ
                console.log('Waiting for WebAuthn module...');
                await waitForWebAuthnModule();
                console.log('WebAuthn module ready, starting authentication');

                // WebAuthn認証実行
                console.log('Calling startWebAuthnAuthentication with options:', window.webauthnOptions);
                await window.startWebAuthnAuthentication(window.webauthnOptions);
                console.log('WebAuthn authentication completed successfully');
            } catch (error) {
                console.error('WebAuthn authentication failed:', error);
                resetWebAuthnButton();

                let errorMsg = '認証に失敗しました: ' + error.message;
                if (error.name === 'NotAllowedError') {
                    errorMsg = 'WebAuthn認証がキャンセルされました。';
                } else if (error.name === 'TimeoutError') {
                    errorMsg = '認証がタイムアウトしました。再度お試しください。';
                } else if (error.message.includes('timeout')) {
                    errorMsg = 'WebAuthn機能の読み込みに時間がかかっています。ページを再読み込みしてお試しください。';
                }

                showError(errorMsg);
            }
        }

        function resetWebAuthnButton() {
            const webauthnButtonText = document.getElementById('webauthn-button-text');
            const cancelWebauthnBtn = document.getElementById('cancel-webauthn');

            if (webauthnButtonText) webauthnButtonText.textContent = 'パスキー認証を開始';
            if (webauthnLoginBtn) webauthnLoginBtn.disabled = false;
            if (cancelWebauthnBtn) cancelWebauthnBtn.style.display = 'none';
        }

        // メールアドレス確認
        checkEmailBtn.addEventListener('click', async function() {
            const email = emailInput.value.trim();

            if (!email) {
                showError('メールアドレスを入力してください。');
                return;
            }

            showLoading();

            try {
                const response = await fetch('/check_webauthn', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken(),
                        'Accept': 'application/json'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify({ email: email })
                });

                const data = await response.json();
                hideLoading();

                if (response.ok) {
                    if (data.webauthn_enabled) {
                        showWebAuthnForm(email, data.webauthn_options);
                    } else {
                        showPasswordForm(email);
                    }
                } else {
                    showError(data.error || '認証方法の確認に失敗しました。');
                }
            } catch (error) {
                hideLoading();
                console.error('Error:', error);
                showError('ネットワークエラーが発生しました。');
            }
        });

        // WebAuthnログインボタンのイベント
        if (webauthnLoginBtn) {
            webauthnLoginBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('WebAuthn login button clicked');
                startWebAuthnAuth();
            });
        }

        // キャンセルボタン
        document.addEventListener('click', function(e) {
            if (e.target && e.target.id === 'cancel-webauthn') {
                e.preventDefault();
                resetWebAuthnButton();
                showError('認証がキャンセルされました');
            }
        });

        // 戻るボタン
        if (backToEmailBtn) {
            backToEmailBtn.addEventListener('click', resetToEmailForm);
        }
        if (backToEmailWebauthnBtn) {
            backToEmailWebauthnBtn.addEventListener('click', function() {
                resetToEmailForm();
            });
        }

        // Enterキーでメール確認
        emailInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                checkEmailBtn.click();
            }
        });

        function showWebAuthnForm(email, webauthnOptions) {
            console.log('Showing WebAuthn form for email:', email);
            console.log('WebAuthn options received:', webauthnOptions);

            const webauthnEmailElement = document.getElementById('webauthn-email');
            if (webauthnEmailElement) {
                webauthnEmailElement.textContent = email;
            }

            window.webauthnOptions = webauthnOptions;
            if (emailForm) emailForm.style.display = 'none';
            if (webauthnForm) webauthnForm.style.display = 'block';
        }

        function showLoading() {
            if (emailForm) emailForm.style.display = 'none';
            if (passwordForm) passwordForm.style.display = 'none';
            if (webauthnForm) webauthnForm.style.display = 'none';
            if (loading) loading.style.display = 'block';
            hideError();
        }

        function hideLoading() {
            if (loading) loading.style.display = 'none';
        }

        function showPasswordForm(email) {
            const emailHiddenElement = document.getElementById('email-hidden');
            const userEmailElement = document.getElementById('user-email');
            const passwordElement = document.getElementById('password');

            if (emailHiddenElement) emailHiddenElement.value = email;
            if (userEmailElement) userEmailElement.textContent = email;
            if (emailForm) emailForm.style.display = 'none';
            if (passwordForm) passwordForm.style.display = 'block';
            if (passwordElement) passwordElement.focus();
        }

        function resetToEmailForm() {
            if (emailForm) emailForm.style.display = 'block';
            if (passwordForm) passwordForm.style.display = 'none';
            if (webauthnForm) webauthnForm.style.display = 'none';
            hideError();
            resetWebAuthnButton();
            if (emailInput) emailInput.focus();
        }

        function showError(message) {
            if (errorMessage) {
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
            }
        }

        function hideError() {
            if (errorMessage) {
                errorMessage.style.display = 'none';
            }
        }
    }

    // ページ読み込み時の初期化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeLoginForm);
    } else {
        initializeLoginForm();
    }
</script>