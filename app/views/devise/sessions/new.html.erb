<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4>ログイン</h4>
        </div>
        <div class="card-body">
          <!-- メールアドレス入力フォーム -->
          <div id="email-form">
            <div class="mb-3">
              <label for="email" class="form-label">メールアドレス</label>
              <input type="email" id="email" class="form-control" placeholder="メールアドレスを入力してください" autofocus>
            </div>
            <div class="d-grid gap-2">
              <button type="button" id="check-email" class="btn btn-primary">認証方法を確認</button>
            </div>
          </div>

          <!-- ローディング表示 -->
          <div id="loading" class="text-center" style="display: none;">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">確認中...</span>
            </div>
            <p class="mt-2">認証方法を確認中...</p>
          </div>

          <!-- パスワード認証フォーム -->
          <div id="password-form" style="display: none;">
            <%= form_with url: user_session_path, method: :post, local: true, id: "password-login-form", data: { turbo: false } do |f| %>
              <input type="hidden" id="email-hidden" name="email">

              <div class="alert alert-info">
                <i class="fas fa-key me-2"></i>
                <span id="user-email"></span> でパスワード認証を行います
              </div>

              <div class="mb-3">
                <label for="password" class="form-label">パスワード</label>
                <input type="password" id="password" name="password" class="form-control" required autocomplete="current-password">
              </div>

              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-success">ログイン</button>
                <button type="button" id="back-to-email" class="btn btn-outline-secondary">戻る</button>
              </div>
            <% end %>
          </div>

          <!-- WebAuthn認証 -->
          <div id="webauthn-form" style="display: none;">
            <div class="alert alert-success">
              <i class="fas fa-fingerprint me-2"></i>
              <!-- IDの不整合を修正：'パスキー-email' -> 'webauthn-email' -->
              <span id="webauthn-email"></span> でパスキー認証を行います
            </div>

            <div class="d-grid gap-2">
              <button type="button" id="webauthn-login" class="btn btn-primary">
                <i class="fas fa-fingerprint me-2"></i>
                パスキー認証を開始
              </button>
              <button type="button" id="back-to-email-webauthn" class="btn btn-outline-secondary">戻る</button>
            </div>
          </div>

          <!-- エラーメッセージ -->
          <div id="error-message" class="alert alert-danger" style="display: none;"></div>

          <div class="mt-3 text-center">
            <p><%= link_to "アカウントをお持ちでない方はこちら", new_user_registration_path, class: "text-decoration-none" %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    // Base64URL <-> ArrayBuffer ユーティリティ
    function base64urlToBuffer(base64url) {
        if (!base64url) return new ArrayBuffer(0);
        const padding = '='.repeat((4 - (base64url.length % 4)) % 4);
        const base64 = (base64url + padding).replace(/-/g, '+').replace(/_/g, '/');
        const raw = atob(base64);
        const bytes = new Uint8Array(raw.length);
        for (let i = 0; i < raw.length; ++i) bytes[i] = raw.charCodeAt(i);
        return bytes.buffer;
    }

    function bufferToBase64url(buffer) {
        const bytes = new Uint8Array(buffer);
        let binary = '';
        for (let i = 0; i < bytes.byteLength; i++) binary += String.fromCharCode(bytes[i]);
        const base64 = btoa(binary);
        return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/g, '');
    }

    function initializePasskeyRegistration() {
        const form = document.getElementById('passkey-form');
        const errorMessage = document.getElementById('error-message');
        const registerBtn = document.getElementById('register-passkey');
        const labelInput = document.getElementById('passkey-label');

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }

        function hideError() {
            errorMessage.style.display = 'none';
        }

        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        if (form) {
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                hideError();

                const label = labelInput.value.trim();
                if (!label) {
                    showError('デバイス名を入力してください。');
                    return;
                }

                if (!('PublicKeyCredential' in window)) {
                    showError('このブラウザはパスキーに対応していません。');
                    return;
                }

                registerBtn.disabled = true;
                registerBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>登録中...';

                try {
                    // サーバーから登録オプションを取得
                    const response = await fetch('<%= new_passkey_path %>', {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin'
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'サーバーエラーが発生しました。');
                    }

                    const options = await response.json();
                    console.log('Received options from server:', options);

                    // WebAuthn形式に変換（安全にチェック）
                    const publicKey = {
                        challenge: base64urlToBuffer(options.challenge),
                        rp: options.rp || {},
                        user: {
                            id: base64urlToBuffer(options.user?.id || ''),
                            name: options.user?.name || '',
                            displayName: options.user?.displayName || options.user?.name || ''
                        },
                        pubKeyCredParams: options.pubKeyCredParams || [],
                        authenticatorSelection: options.authenticatorSelection || {},
                        timeout: options.timeout || 60000,
                        attestation: options.attestation || 'none',
                        excludeCredentials: (options.excludeCredentials || []).map(cred => ({
                            ...cred,
                            id: base64urlToBuffer(cred.id)
                        }))
                    };

                    console.log('Converted publicKey:', publicKey);

                    // パスキー作成
                    const credential = await navigator.credentials.create({ publicKey });

                    if (!credential) {
                        throw new Error('パスキーの作成に失敗しました。');
                    }

                    // サーバー送信用に変換
                    const credentialData = {
                        passkey: {
                            label: label,
                            credential: {
                                id: credential.id,
                                rawId: bufferToBase64url(credential.rawId),
                                type: credential.type,
                                response: {
                                    clientDataJSON: bufferToBase64url(credential.response.clientDataJSON),
                                    attestationObject: bufferToBase64url(credential.response.attestationObject)
                                }
                            }
                        }
                    };

                    // サーバーに登録
                    const createResponse = await fetch('<%= passkeys_path %>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRF-Token': getCSRFToken()
                        },
                        body: JSON.stringify(credentialData),
                        credentials: 'same-origin'
                    });

                    const result = await createResponse.json();

                    if (createResponse.ok && result.success) {
                        window.location.href = result.redirect_url || '<%= passkeys_path %>';
                    } else {
                        showError(result.error || 'パスキーの登録に失敗しました。');
                    }

                } catch (error) {
                    console.error('Passkey registration error:', error);
                    showError(error.message || 'パスキーの登録に失敗しました。');
                } finally {
                    registerBtn.disabled = false;
                    registerBtn.innerHTML = '<i class="fas fa-fingerprint me-2"></i>パスキーを登録';
                }
            });
        }
    }

    document.addEventListener('DOMContentLoaded', initializePasskeyRegistration);
    document.addEventListener('turbo:load', initializePasskeyRegistration);
</script>