
<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4><i class="fas fa-fingerprint me-2"></i>WebAuthn認証</h4>
        </div>
        <div class="card-body">
          <!-- ユーザー情報表示 -->
          <div class="alert alert-info">
            <i class="fas fa-user me-2"></i>
            <span id="user-email"><%= @user_email %></span> でWebAuthn認証を行います
          </div>

          <!-- WebAuthn認証ボタン -->
          <div class="d-grid gap-2 mb-3">
            <button type="button" id="webauthn-authenticate-btn" class="btn btn-primary btn-lg">
              <i class="fas fa-fingerprint me-2"></i>WebAuthn認証を開始
            </button>
          </div>

          <!-- 戻るボタン -->
          <div class="d-grid">
            <a href="<%= new_user_session_path %>" class="btn btn-outline-secondary">
              <i class="fas fa-arrow-left me-2"></i>ログイン画面に戻る
            </a>
          </div>

          <!-- エラーメッセージ -->
          <div id="error-message" class="alert alert-danger mt-3" style="display: none;"></div>

          <!-- 処理中表示 -->
          <div id="processing" class="text-center mt-3" style="display: none;">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">認証中...</span>
            </div>
            <p class="mt-2">WebAuthn認証を実行中...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('WebAuthn authentication page loaded');
        console.log('WebAuthn options:', <%= raw @webauthn_options.to_json %>);

        const webauthnOptions = <%= raw @webauthn_options.to_json %>;
        const userEmail = '<%= @user_email %>';
        const authenticateBtn = document.getElementById('webauthn-authenticate-btn');
        const errorMessage = document.getElementById('error-message');
        const processing = document.getElementById('processing');

        function showError(message) {
            console.error('Error:', message);
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            processing.style.display = 'none';
            authenticateBtn.disabled = false;
            authenticateBtn.innerHTML = '<i class="fas fa-fingerprint me-2"></i>WebAuthn認証を開始';
        }

        function hideError() {
            errorMessage.style.display = 'none';
        }

        function showProcessing() {
            processing.style.display = 'block';
            hideError();
            authenticateBtn.disabled = true;
            authenticateBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>認証中...';
        }

        // CSRFトークンを取得
        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        // WebAuthn認証実行
        authenticateBtn.addEventListener('click', async function() {
            console.log('WebAuthn authenticate button clicked');

            if (!webauthnOptions) {
                showError('WebAuthn認証オプションが取得できませんでした。');
                return;
            }

            showProcessing();

            try {
                console.log('Starting WebAuthn authentication with options:', webauthnOptions);

                // WebAuthn認証を実行
                const credential = await startWebAuthnAuthentication(webauthnOptions);
                console.log('WebAuthn credential obtained:', credential);

                // 認証データをサーバーに送信
                const response = await fetch('/webauthn_authentications', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': getCSRFToken()
                    },
                    body: JSON.stringify({
                        credential: {
                            id: credential.id,
                            rawId: arrayBufferToBase64URL(credential.rawId),
                            type: credential.type,
                            response: {
                                clientDataJSON: arrayBufferToBase64URL(credential.response.clientDataJSON),
                                authenticatorData: arrayBufferToBase64URL(credential.response.authenticatorData),
                                signature: arrayBufferToBase64URL(credential.response.signature),
                                userHandle: credential.response.userHandle ? arrayBufferToBase64URL(credential.response.userHandle) : null
                            }
                        }
                    })
                });

                console.log('Authentication response status:', response.status);

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'WebAuthn認証に失敗しました');
                }

                const result = await response.json();
                console.log('Authentication successful:', result);

                // ログイン成功時の処理
                if (result.redirect_url) {
                    window.location.href = result.redirect_url;
                } else {
                    window.location.href = '/';
                }

            } catch (error) {
                console.error('WebAuthn authentication failed:', error);

                if (error.name === 'NotAllowedError') {
                    showError('WebAuthn認証がキャンセルされました。');
                } else if (error.name === 'InvalidStateError') {
                    showError('この認証キーは既に登録されています。');
                } else if (error.name === 'NotSupportedError') {
                    showError('お使いのブラウザはWebAuthnをサポートしていません。');
                } else {
                    showError('WebAuthn認証に失敗しました: ' + error.message);
                }
            }
        });

        // 初期状態でエラーメッセージを非表示
        hideError();
    });
</script>