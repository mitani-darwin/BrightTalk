<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h4>
            <i class="fas fa-fingerprint me-2"></i>
            <% if @first_time %>
              パスキー認証の初期設定
            <% else %>
              新しいパスキー認証を追加
            <% end %>
          </h4>
        </div>
        <div class="card-body">
          <% if @first_time %>
            <div class="alert alert-success">
              <h6><i class="fas fa-check-circle me-2"></i>メール認証が完了しました！</h6>
              <p class="mb-0">セキュリティ強化のため、パスキー認証の設定をお勧めします。</p>
            </div>
          <% end %>

          <div class="alert alert-info">
            <h6><i class="fas fa-info-circle me-2"></i>パスキー認証について</h6>
            <p class="mb-2">Touch ID、Face ID、またはセキュリティキーを使用して、パスワードなしでログインできます。</p>
            <ul class="mb-0">
              <li>より安全で便利なログイン方法です</li>
              <li>生体認証またはセキュリティキーが必要です</li>
              <li>複数の認証方法を登録できます</li>
            </ul>
          </div>

          <div class="mb-3">
            <label for="credential-label" class="form-label">認証名</label>
            <input type="text" id="credential-label" class="form-control"
                   placeholder="例：MacBook Touch ID、iPhone Face ID など"
                   value="<%= @label %>">
            <div class="form-text">この認証方法を識別するための名前を入力してください。</div>
          </div>

          <div class="d-grid gap-2">
            <button type="button" id="register-passkey-btn" class="btn btn-primary btn-lg">
              <i class="fas fa-fingerprint me-2"></i>パスキー認証を登録
            </button>
          </div>

          <% if @first_time %>
            <div class="d-grid gap-2 mt-3">
              <%= link_to root_path, class: "btn btn-outline-secondary" do %>
                <i class="fas fa-arrow-right me-2"></i>後で設定する
              <% end %>
            </div>
          <% else %>
            <div class="d-grid gap-2 mt-3">
              <%= link_to user_passkeys_path, class: "btn btn-outline-secondary" do %>
                <i class="fas fa-arrow-left me-2"></i>認証管理に戻る
              <% end %>
            </div>
          <% end %>

          <div id="error-message" class="alert alert-danger mt-3" style="display: none;"></div>
          <div id="processing" class="text-center mt-3" style="display: none;">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">登録中...</span>
            </div>
            <p class="mt-2">パスキー認証を登録中...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Passkey registration page loaded');

        const passkeyOptions = <%= raw @passkey_options.to_json %>;
        const registerBtn = document.getElementById('register-passkey-btn');
        const credentialLabelInput = document.getElementById('credential-label');
        const errorMessage = document.getElementById('error-message');
        const processing = document.getElementById('processing');

        function showError(message) {
            if (errorMessage) {
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
            }
            if (processing) processing.style.display = 'none';
            if (registerBtn) {
                registerBtn.disabled = false;
                registerBtn.innerHTML = '<i class="fas fa-fingerprint me-2"></i>パスキー認証を登録';
            }
        }

        function hideError() {
            if (errorMessage) errorMessage.style.display = 'none';
        }

        function showProcessing() {
            if (processing) processing.style.display = 'block';
            hideError();
            if (registerBtn) {
                registerBtn.disabled = true;
                registerBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>登録中...';
            }
        }

        // Base64URL変換関数
        function base64URLToArrayBuffer(base64url) {
            const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
            const binaryString = atob(base64);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes.buffer;
        }

        function arrayBufferToBase64URL(buffer) {
            const bytes = new Uint8Array(buffer);
            let binary = '';
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            const base64 = btoa(binary);
            return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
        }

        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        registerBtn.addEventListener('click', async function(e) {
            e.preventDefault();

            const credentialLabel = credentialLabelInput.value.trim();
            if (!credentialLabel) {
                showError('認証名を入力してください。');
                return;
            }

            if (!passkeyOptions) {
                showError('パスキー登録オプションが取得できませんでした。');
                return;
            }

            showProcessing();

            try {
                console.log('Starting Passkey registration...');

                // WebAuthnオプションを変換
                const publicKeyCredentialCreationOptions = {
                    challenge: base64URLToArrayBuffer(passkeyOptions.challenge),
                    rp: passkeyOptions.rp,
                    user: {
                        id: base64URLToArrayBuffer(passkeyOptions.user.id),
                        name: passkeyOptions.user.name,
                        displayName: passkeyOptions.user.displayName
                    },
                    pubKeyCredParams: passkeyOptions.pubKeyCredParams,
                    timeout: passkeyOptions.timeout,
                    authenticatorSelection: passkeyOptions.authenticatorSelection,
                    attestation: passkeyOptions.attestation
                };

                // excludeCredentialsの変換
                if (passkeyOptions.excludeCredentials && passkeyOptions.excludeCredentials.length > 0) {
                    publicKeyCredentialCreationOptions.excludeCredentials = passkeyOptions.excludeCredentials.map(cred => ({
                        type: cred.type,
                        id: base64URLToArrayBuffer(cred.id)
                    }));
                }

                // WebAuthn登録を実行
                const credential = await navigator.credentials.create({
                    publicKey: publicKeyCredentialCreationOptions
                });

                console.log('Passkey credential created:', credential);

                // 認証データをサーバーに送信
                const response = await fetch('<%= user_passkeys_path %>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-Token': getCSRFToken()
                    },
                    body: JSON.stringify({
                        label: credentialLabel,
                        credential: {
                            id: credential.id,
                            rawId: arrayBufferToBase64URL(credential.rawId),
                            type: credential.type,
                            response: {
                                clientDataJSON: arrayBufferToBase64URL(credential.response.clientDataJSON),
                                attestationObject: arrayBufferToBase64URL(credential.response.attestationObject)
                            }
                        }
                    })
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    window.location.href = result.redirect_url || '<%= user_passkeys_path %>';
                } else {
                    throw new Error(result.error || 'パスキー認証の登録に失敗しました');
                }

            } catch (error) {
                console.error('Passkey registration failed:', error);

                let errorMsg = 'パスキー認証の登録に失敗しました。';

                if (error.name === 'NotAllowedError') {
                    errorMsg = 'パスキー登録がキャンセルされました。';
                } else if (error.name === 'InvalidStateError') {
                    errorMsg = 'この認証キーは既に登録されています。';
                } else if (error.name === 'NotSupportedError') {
                    errorMsg = 'お使いのブラウザはパスキーをサポートしていません。';
                } else if (error.name === 'TimeoutError') {
                    errorMsg = 'リクエストがタイムアウトしました。再度お試しください。';
                } else if (error.message) {
                    errorMsg = `${errorMsg} ${error.message}`;
                }

                showError(errorMsg);
            }
        });
    });
</script>