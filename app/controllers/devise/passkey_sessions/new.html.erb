<div class="container mt-4" data-turbo="false">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h4>ログイン</h4>
        </div>
        <div class="card-body">
          <!-- メールアドレス入力フォーム -->
          <div id="email-form">
            <div class="mb-3">
              <label for="email" class="form-label">メールアドレス</label>
              <input type="email" id="email" class="form-control"
                     value="<%= @email %>"
                     placeholder="メールアドレスを入力してください" autofocus>
            </div>
            <div class="d-grid gap-2">
              <button type="button" id="check-email" class="btn btn-primary">認証方法を確認</button>
            </div>
          </div>

          <!-- ローディング表示 -->
          <div id="loading" class="text-center" style="display: none;">
            <div class="spinner-border" role="status">
              <span class="visually-hidden">確認中...</span>
            </div>
            <p class="mt-2">認証方法を確認中...</p>
          </div>

          <!-- パスワード認証フォーム -->
          <div id="password-form" style="display: none;">
            <%= form_with url: user_session_path, method: :post, local: true,
                          id: "password-login-form", data: { turbo: false } do |f| %>
              <input type="hidden" id="email-hidden" name="user[email]">

              <div class="alert alert-info">
                <i class="fas fa-key me-2"></i>
                <span id="user-email"></span> でパスワード認証を行います
              </div>

              <div class="mb-3">
                <label for="password" class="form-label">パスワード</label>
                <input type="password" id="password" name="user[password]"
                       class="form-control" required autocomplete="current-password">
              </div>

              <div class="d-grid gap-2">
                <button type="submit" class="btn btn-success">ログイン</button>
                <button type="button" id="back-to-email" class="btn btn-outline-secondary">戻る</button>
              </div>
            <% end %>
          </div>

          <!-- Passkey認証 -->
          <div id="passkey-form" style="display: none;">
            <div class="alert alert-success">
              <i class="fas fa-fingerprint me-2"></i>
              <span id="passkey-email"></span> でパスキー認証を行います
            </div>

            <div class="d-grid gap-2">
              <button type="button" id="passkey-login" class="btn btn-primary">
                <i class="fas fa-fingerprint me-2"></i>
                パスキー認証を開始
              </button>
              <button type="button" id="back-to-email-passkey" class="btn btn-outline-secondary">戻る</button>
            </div>
          </div>

          <!-- エラーメッセージ -->
          <div id="error-message" class="alert alert-danger" style="display: none;"></div>

          <div class="mt-3 text-center">
            <p><%= link_to "アカウントをお持ちでない方はこちら", new_user_registration_path, class: "text-decoration-none" %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
    // Base64URL <-> ArrayBuffer ユーティリティ
    function base64urlToBuffer(base64url) {
        const padding = '='.repeat((4 - (base64url.length % 4)) % 4);
        const base64 = (base64url + padding).replace(/-/g, '+').replace(/_/g, '/');
        const raw = atob(base64);
        const bytes = new Uint8Array(raw.length);
        for (let i = 0; i < raw.length; ++i) bytes[i] = raw.charCodeAt(i);
        return bytes.buffer;
    }

    function bufferToBase64url(buffer) {
        const bytes = new Uint8Array(buffer);
        let binary = '';
        for (let i = 0; i < bytes.byteLength; i++) binary += String.fromCharCode(bytes[i]);
        const base64 = btoa(binary);
        return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/g, '');
    }

    function initializeLoginForm() {
        const emailInput = document.getElementById('email');
        const checkEmailBtn = document.getElementById('check-email');
        const emailForm = document.getElementById('email-form');
        const passwordForm = document.getElementById('password-form');
        const passkeyForm = document.getElementById('passkey-form');
        const loading = document.getElementById('loading');
        const errorMessage = document.getElementById('error-message');

        function getCSRFToken() {
            const token = document.querySelector('meta[name="csrf-token"]');
            return token ? token.getAttribute('content') : '';
        }

        function showLoading() {
            if (emailForm) emailForm.style.display = 'none';
            if (passwordForm) passwordForm.style.display = 'none';
            if (passkeyForm) passkeyForm.style.display = 'none';
            if (loading) loading.style.display = 'block';
            hideError();
        }

        function hideLoading() {
            if (loading) loading.style.display = 'none';
        }

        function showError(message) {
            if (errorMessage) {
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
            }
        }

        function hideError() {
            if (errorMessage) errorMessage.style.display = 'none';
        }

        function showPasswordForm(email) {
            document.getElementById('email-hidden').value = email;
            document.getElementById('user-email').textContent = email;
            if (emailForm) emailForm.style.display = 'none';
            if (passwordForm) passwordForm.style.display = 'block';
            document.getElementById('password').focus();
        }

        function showPasskeyForm(email, passkeyOptions) {
            const emailSpan = document.getElementById('passkey-email');
            if (emailSpan) emailSpan.textContent = email;
            window.passkeyOptions = passkeyOptions;
            if (emailForm) emailForm.style.display = 'none';
            if (passkeyForm) passkeyForm.style.display = 'block';
        }

        function resetToEmailForm() {
            if (emailForm) emailForm.style.display = 'block';
            if (passwordForm) passwordForm.style.display = 'none';
            if (passkeyForm) passkeyForm.style.display = 'none';
            hideError();
            if (emailInput) emailInput.focus();
        }

        // 認証方法の確認
        if (checkEmailBtn) {
            checkEmailBtn.addEventListener('click', async function() {
                const email = emailInput.value.trim();
                if (!email) {
                    showError('メールアドレスを入力してください。');
                    return;
                }

                showLoading();
                try {
                    const response = await fetch('<%= challenge_user_passkey_session_path %>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRF-Token': getCSRFToken()
                        },
                        body: JSON.stringify({ email: email }),
                        credentials: 'same-origin'
                    });

                    const data = await response.json();
                    hideLoading();

                    if (response.ok) {
                        if (data.passkey_enabled) {
                            showPasskeyForm(email, data.passkey_options);
                        } else {
                            showPasswordForm(email);
                        }
                    } else {
                        showError(data.error || '認証方法の確認に失敗しました。');
                    }
                } catch (error) {
                    hideLoading();
                    console.error('Error:', error);
                    showError('ネットワークエラーが発生しました。');
                }
            });
        }

        // Passkey認証開始
        const passkeyLoginBtn = document.getElementById('passkey-login');
        if (passkeyLoginBtn) {
            passkeyLoginBtn.addEventListener('click', async function() {
                try {
                    if (!window.passkeyOptions) {
                        showError('パスキーオプションが見つかりません。最初からやり直してください。');
                        return;
                    }
                    if (!('PublicKeyCredential' in window)) {
                        showError('このブラウザはパスキーに対応していません。');
                        return;
                    }

                    const opts = window.passkeyOptions;
                    const publicKey = {
                        ...opts,
                        challenge: base64urlToBuffer(opts.challenge),
                        allowCredentials: (opts.allowCredentials || []).map(c => ({
                            ...c,
                            id: base64urlToBuffer(c.id)
                        }))
                    };

                    const assertion = await navigator.credentials.get({ publicKey });

                    const payload = {
                        credential: {
                            id: assertion.id,
                            rawId: bufferToBase64url(assertion.rawId),
                            type: assertion.type,
                            response: {
                                clientDataJSON: bufferToBase64url(assertion.response.clientDataJSON),
                                authenticatorData: bufferToBase64url(assertion.response.authenticatorData),
                                signature: bufferToBase64url(assertion.response.signature),
                                userHandle: assertion.response.userHandle
                                    ? bufferToBase64url(assertion.response.userHandle)
                                    : ''
                            }
                        }
                    };

                    const res = await fetch('<%= user_passkey_session_path %>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRF-Token': getCSRFToken()
                        },
                        body: JSON.stringify(payload),
                        credentials: 'same-origin'
                    });

                    const result = await res.json();
                    if (res.ok && result.success) {
                        window.location.assign(result.redirect_url || '/');
                    } else {
                        showError(result.error || 'パスキー認証に失敗しました。');
                    }
                } catch (error) {
                    console.error('Passkey error:', error);
                    showError('パスキー認証に失敗しました。');
                }
            });
        }

        // 戻るボタン
        const backToEmailBtn = document.getElementById('back-to-email');
        if (backToEmailBtn) backToEmailBtn.addEventListener('click', resetToEmailForm);

        const backToEmailPasskeyBtn = document.getElementById('back-to-email-passkey');
        if (backToEmailPasskeyBtn) backToEmailPasskeyBtn.addEventListener('click', resetToEmailForm);

        // Enterキーでメール確認
        if (emailInput) {
            emailInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') checkEmailBtn.click();
            });
        }
    }

    document.addEventListener('DOMContentLoaded', initializeLoginForm);
    document.addEventListener('turbo:load', initializeLoginForm);
</script>