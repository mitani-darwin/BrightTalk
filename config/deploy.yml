# サービス名（必須）
service: bright_talk

# Name of the container image
image: mitani-darwin/brighttalk

# Deploy to these servers
servers:
  web:
    hosts:
      - 52.192.149.181
    options:
      # EC2メタデータサービスへのアクセスを確保
      add-host:
        - "169.254.169.254:host-gateway"
        - "host.docker.internal:host-gateway"

# Enable SSL auto certification via Let's Encrypt
proxy:
  ssl: true
  host: www.brighttalk.jp

registry:
  server: ghcr.io
  username: GITHUB_USERNAME
  password: GITHUB_TOKEN

# Inject ENV variables into containers
env:
  secret:
    - RAILS_MASTER_KEY
    - SECRET_KEY_BASE
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - GITHUB_USERNAME
    - GITHUB_TOKEN
  clear:
    SOLID_QUEUE_IN_PUMA: "true"
    RAILS_ENV: "production"
    RAILS_LOG_LEVEL: "info"
    RAILS_SERVE_STATIC_FILES: "true"
    RAILS_LOG_TO_STDOUT: "true"
    AWS_REGION: "ap-northeast-1"


# SSH configuration - カスタムポート47583を使用
ssh:
  port: 47583
  user: ec2-user
  keys_only: true
  keys:
    - <%= ENV['SSH_KEY_PATH'] %>

aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  start: app start
  stop: app stop

# Use a persistent storage volume
volumes:
  - "bright_talk_storage:/rails/storage"
  - "bright_talk_db:/rails/db"

# Bridge fingerprinted assets
asset_path: /rails/public/assets

# Configure the image builder
builder:
  arch: arm64

# Logging configuration
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Boot configuration
boot:
  limit: 10
  wait: 5  # 2秒から5秒に増加