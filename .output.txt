diff --git a/app/controllers/posts_controller.rb b/app/controllers/posts_controller.rb
index 0bff662..a1a7088 100644
--- a/app/controllers/posts_controller.rb
+++ b/app/controllers/posts_controller.rb
@@ -187,6 +187,11 @@ class PostsController < ApplicationController

   # 自動保存（5秒間隔での下書き保存）
   def auto_save
+    Rails.logger.info "Auto-save action called with params: #{params.inspect}"
+    Rails.logger.info "Auto-save request headers: #{request.headers.to_h}"
+    Rails.logger.info "Auto-save request format: #{request.format}"
+    Rails.logger.info "Auto-save xhr?: #{request.xhr?}"
+
     @post = if params[:id].present?
               # slugまたは数値IDでの検索
               current_user.posts.friendly.find(params[:id])
@@ -259,18 +264,28 @@ class PostsController < ApplicationController
       end
     end

-    if @post.save(validate: false)
-      render json: {
-        success: true,
-        post_id: @post.friendly_id || @post.id, # slugを優先して返す
-        message: "自動保存されました",
-        saved_at: Time.current.strftime("%H:%M:%S")
-      }
-    else
-      render json: {
-        success: false,
-        message: "自動保存に失敗しました"
-      }
+    # Ajax リクエストかどうかを明示的にチェック
+    unless request.xhr? || request.format.json?
+      render json: { success: false, message: "Ajax request required" }, status: :bad_request
+      return
+    end
+
+    respond_to do |format|
+      format.json do
+        if @post.save(validate: false)
+          render json: {
+            success: true,
+            post_id: @post.friendly_id || @post.id,
+            message: "自動保存されました",
+            saved_at: Time.current.strftime("%H:%M:%S")
+          }
+        else
+          render json: {
+            success: false,
+            message: "自動保存に失敗しました"
+          }
+        end
+      end
     end
   end

@@ -421,8 +436,8 @@ class PostsController < ApplicationController
   end

   def auto_save_params
-    # auto_save用のパラメータを許可（idも含める - URLからのIDとは別物）
-    params.permit(:id, :title, :content, :purpose, :target_audience, :category_id, :post_type_id, :key_points, :expected_outcome, video_signed_ids: [])
+    # auto_save用のパラメータを許可（idは除外してURLパラメータとの混同を避ける ）
+    params.permit(:title, :content, :purpose, :target_audience, :category_id, :post_type_id, :key_points, :expected_outcome, video_signed_ids: [])
   end

   def log_user_status
diff --git a/app/helpers/posts_helper.rb b/app/helpers/posts_helper.rb
index a4f66c6..fb2e3fc 100644
--- a/app/helpers/posts_helper.rb
+++ b/app/helpers/posts_helper.rb
@@ -55,7 +55,7 @@ module PostsHelper
     end

     # Convert video links [動画 filename](attachment:filename) to HTML video tags
-    processed_content = processed_content.gsub(/\[([^\]]*\.(?:mp4|avi|mov|wmv|flv|webm|mkv|m4v))\]\(attachment:([^)]+)\)/i) do
+    processed_content = processed_content.gsub(/\[([^\]]*\.(?:mp4|avi|mov|wmv|flv|webm|mkv|m4v))\]\(attachment:([^)]+)\)/i) do |match|
       attachment_filename = $1.strip
       normalized_filename = normalize_name.call(attachment_filename)

diff --git a/app/views/posts/_auto_save_status.html.erb b/app/views/posts/_auto_save_status.html.erb
index e13b402..983b7d9 100644
--- a/app/views/posts/_auto_save_status.html.erb
+++ b/app/views/posts/_auto_save_status.html.erb
@@ -1,8 +1,8 @@
 <!-- 自動保存ステータス表示 -->
-<div id="autoSaveStatus" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
-  <div id="autoSaveAlert" class="alert alert-success alert-dismissible fade" role="alert" style="display: none;">
-    <i class="fas fa-check-circle me-2"></i>
+<div id="autoSaveStatus" class="position-fixed end-0 p-3" style="top: calc(var(--bs-navbar-height, 56px) + 4px); z-index: 1050;">
+  <div id="autoSaveAlert" class="alert alert-success alert-dismissible fade" role="alert"
+       style="display: none; min-width: 200px; padding: 6px 12px; font-size: 13px; background-color: rgba(212, 237, 218, 0.9) !important; border: 1px solid rgba(195, 230, 203, 0.8) !important;">
     <span id="autoSaveMessage">自動保存されました</span>
-    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
+    <button type="button" class="btn-close btn-close-sm" data-bs-dismiss="alert" aria-label="Close" style="font-size: 10px;"></button>
   </div>
 </div>
\ No newline at end of file
diff --git a/app/views/posts/_form_javascript.html.erb b/app/views/posts/_form_javascript.html.erb
index 296a941..2857787 100644
--- a/app/views/posts/_form_javascript.html.erb
+++ b/app/views/posts/_form_javascript.html.erb
@@ -52,11 +52,13 @@

     // Auto-save functionality
     function initializeAutoSave() {
-        if (typeof window.autoSaveEnabled !== 'undefined' && window.autoSaveEnabled) {
-            const form = document.querySelector('form[data-turbo="false"]');
-            if (form) {
-                setInterval(performAutoSave, 5000); // Auto-save every 5 seconds
-            }
+        // 新規作成または編集の場合のみ自動保存を有効にする
+        const form = document.querySelector('form[data-turbo="false"]');
+        const isNewOrEdit = form && (window.location.pathname.includes('/new') || window.location.pathname.includes('/edit'));
+
+        if (isNewOrEdit) {
+            window.autoSaveEnabled = true;
+            setInterval(performAutoSave, 5000);
         }
     }

@@ -234,35 +236,111 @@
         if (form) {
             const formData = new FormData(form);

+            console.log('Auto-save: Starting request to /posts/auto_save');
+
             fetch('/posts/auto_save', {
                 method: 'POST',
                 headers: {
                     'X-Requested-With': 'XMLHttpRequest',
-                    'X-CSRF-Token': getCSRFToken()
+                    'X-CSRF-Token': getCSRFToken(),
+                    'Accept': 'application/json',           // 追加
+                    'Content-Type': 'application/x-www-form-urlencoded' // 追加
                 },
                 body: formData
             })
-                .then(response => response.json())
+                .then(response => {
+                    // デバッグ情報を詳細にログ出力
+                    console.log('Auto-save: Response received');
+                    console.log('Auto-save: Status:', response.status);
+                    console.log('Auto-save: Status text:', response.statusText);
+                    console.log('Auto-save: OK:', response.ok);
+
+                    const contentType = response.headers.get('content-type');
+                    console.log('Auto-save: Content-Type:', contentType);
+
+                    if (!response.ok) {
+                        // エラーレスポンスの内容も確認
+                        return response.text().then(text => {
+                            console.error('Auto-save: Server error response:', text);
+                            throw new Error(`Server error: ${response.status} - ${text.substring(0, 200)}`);
+                        });
+                    }
+
+                    if (contentType && contentType.includes('application/json')) {
+                        return response.json();
+                    } else {
+                        // 実際のレスポンス内容を確認
+                        return response.text().then(text => {
+                            console.error('Auto-save: Invalid response format, received:', text.substring(0, 500));
+                            console.error('Auto-save: Expected JSON, got Content-Type:', contentType);
+                            throw new Error(`Invalid response format. Expected JSON, got: ${contentType}`);
+                        });
+                    }
+                })
                 .then(data => {
-                    if (data.success) {
+                    console.log('Auto-save: Success response:', data);
+                    if (data && data.success) {
                         showAutoSaveSuccess(data.message);
                         updatePostId(data.post_id);
+                    } else {
+                        console.warn('Auto-save failed:', data?.message || 'Unknown error');
                     }
                 })
                 .catch(error => {
-                    console.error('Auto-save error:', error);
+                    console.error('Auto-save error details:', {
+                        message: error.message,
+                        stack: error.stack,
+                        name: error.name
+                    });
+                    // 開発時のみエラーメッセージを表示
+                    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
+                        showAutoSaveError(`自動保存エラー: ${error.message}`);
+                    }
                 });
         }
     }

-    function showAutoSaveSuccess(message) {
+    function showAutoSaveError(message) {
         const alert = document.getElementById('autoSaveAlert');
         const messageSpan = document.getElementById('autoSaveMessage');

         if (alert && messageSpan) {
             messageSpan.textContent = message;
+            alert.className = 'alert alert-danger alert-dismissible fade show'; // エラー用スタイル
+            alert.style.display = 'block';
+
+            setTimeout(() => {
+                alert.classList.remove('show');
+                setTimeout(() => {
+                    alert.style.display = 'none';
+                    alert.className = 'alert alert-success alert-dismissible fade'; // 元に戻す
+                }, 300);
+            }, 8000); // エラーは少し長めに表示
+        }
+    }
+
+    function showAutoSaveSuccess(message) {
+        console.log('showAutoSaveSuccess called with:', message);
+
+        const alert = document.getElementById('autoSaveAlert');
+        const messageSpan = document.getElementById('autoSaveMessage');
+
+        console.log('Elements found:', {
+            alert: !!alert,
+            messageSpan: !!messageSpan,
+            alertDisplay: alert?.style.display,
+            alertClass: alert?.className
+        });
+
+        if (alert && messageSpan) {
+            messageSpan.textContent = message + ' ' + new Date().toLocaleTimeString();
+            alert.className = 'alert alert-success alert-dismissible fade show';
             alert.style.display = 'block';
-            alert.classList.add('show');
+
+            console.log('After setting:', {
+                display: alert.style.display,
+                className: alert.className
+            });

             setTimeout(() => {
                 alert.classList.remove('show');
